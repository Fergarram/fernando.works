!function(Q){var B={};function F(U){if(B[U])return B[U].exports;var I=B[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,F),I.l=!0,I.exports}F.m=Q,F.c=B,F.d=function(Q,B,U){F.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:U})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,B){if(1&B&&(Q=F(Q)),8&B)return Q;if(4&B&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(F.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&B&&"string"!=typeof Q)for(var I in Q)F.d(U,I,function(B){return Q[B]}.bind(null,I));return U},F.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(B,"a",B),B},F.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},F.p="",F(F.s=2)}([function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  howler.js v2.1.3\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n(function () {\n  'use strict';\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n\n  var HowlerGlobal = function HowlerGlobal() {\n    this.init();\n  };\n\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function init() {\n      var self = this || Howler; // Create a global ID counter.\n\n      self._counter = 1000; // Pool of unlocked HTML5 Audio objects.\n\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10; // Internal properties.\n\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null; // Public properties.\n\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null; // Set to false to disable the auto audio unlocker.\n\n      self.autoUnlock = true; // Setup the various state values for global tracking.\n\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function volume(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol); // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol; // Don't update any of the nodes if we are muted.\n\n        if (self._muted) {\n          return self;\n        } // When using Web Audio, we just need to adjust the master gain.\n\n\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        } // Loop through and change volume for all HTML5 audio nodes.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and change the volumes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function mute(muted) {\n      var self = this || Howler; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted; // With Web Audio, we just need to mute the master gain.\n\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      } // Loop through and mute all HTML5 Audio nodes.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and mark the audio node as muted.\n\n\n          for (var j = 0; j < ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = muted ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function unload() {\n      var self = this || Howler;\n\n      for (var i = self._howls.length - 1; i >= 0; i--) {\n        self._howls[i].unload();\n      } // Create a new AudioContext to make sure it is fully reset.\n\n\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function codecs(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function _setup() {\n      var self = this || Howler; // Keeps track of the suspend/resume state of the AudioContext.\n\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended'; // Automatically begin the 30-second suspend process\n\n      self._autoSuspend(); // Check if audio is available.\n\n\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio(); // Check if the canplaythrough event is available.\n\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      } // Test to make sure audio isn't disabled in Internet Explorer.\n\n\n      try {\n        var test = new Audio();\n\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {} // Check for supported codecs.\n\n\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function _setupCodecs() {\n      var self = this || Howler;\n      var audioTest = null; // Must wrap in a try/catch because IE11 in server mode throws an error.\n\n      try {\n        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''); // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n\n      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function _unlockAudio() {\n      var self = this || Howler; // Only run this if Web Audio is supported and it hasn't already been unlocked.\n\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false; // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      } // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n\n\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050); // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n\n      var unlock = function unlock(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        for (var i = 0; i < self.html5PoolSize; i++) {\n          try {\n            var audioNode = new Audio(); // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n\n            audioNode._unlocked = true; // Add the audio node to the pool.\n\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } // Loop through any assigned audio nodes and unlock them.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and unlock the audio nodes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n\n                sound._node.load();\n              }\n            }\n          }\n        } // Fix Android can not play in suspend state.\n\n\n        self._autoResume(); // Create an empty buffer.\n\n\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination); // Play the empty buffer.\n\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        } // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n\n\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        } // Setup a timeout to check that we are unlocked on the next event loop.\n\n\n        source.onended = function () {\n          source.disconnect(0); // Update the unlocked state and prevent this check from happening again.\n\n          self._audioUnlocked = true; // Remove the touch start listener.\n\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true); // Let all sounds know that audio has been unlocked.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      }; // Setup a touch start listener to attempt an unlock in.\n\n\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function _obtainHtml5Audio() {\n      var self = this || Howler; // Return the next object from the pool if one exists.\n\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      } //.Check if the audio is locked and throw a warning.\n\n\n      var testPlay = new Audio().play();\n\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay[\"catch\"](function () {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function _releaseHtml5Audio(audio) {\n      var self = this || Howler; // Don't add audio to the pool if we don't know if it has been unlocked.\n\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function _autoSuspend() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      } // Check if any sounds are playing.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j = 0; j < self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      } // If no sound has played after 30 seconds, suspend the context.\n\n\n      self._suspendTimer = setTimeout(function () {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function () {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n\n            self._autoResume();\n          }\n        });\n      }, 30000);\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function _autoResume() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function () {\n          self.state = 'running'; // Emit to all Howls that the audio has resumed.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  }; // Setup the global audio controller.\n\n  var Howler = new HowlerGlobal();\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n\n  var Howl = function Howl(o) {\n    var self = this; // Throw an error if no source is provided.\n\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function init(o) {\n      var self = this; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!Howler.ctx) {\n        setupAudioContext();\n      } // Setup user-defined default properties.\n\n\n      self._autoplay = o.autoplay || false;\n      self._format = typeof o.format !== 'string' ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = typeof o.preload === 'boolean' ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = typeof o.src !== 'string' ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false; // Setup all other default properties.\n\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false; // Setup event listeners.\n\n      self._onend = o.onend ? [{\n        fn: o.onend\n      }] : [];\n      self._onfade = o.onfade ? [{\n        fn: o.onfade\n      }] : [];\n      self._onload = o.onload ? [{\n        fn: o.onload\n      }] : [];\n      self._onloaderror = o.onloaderror ? [{\n        fn: o.onloaderror\n      }] : [];\n      self._onplayerror = o.onplayerror ? [{\n        fn: o.onplayerror\n      }] : [];\n      self._onpause = o.onpause ? [{\n        fn: o.onpause\n      }] : [];\n      self._onplay = o.onplay ? [{\n        fn: o.onplay\n      }] : [];\n      self._onstop = o.onstop ? [{\n        fn: o.onstop\n      }] : [];\n      self._onmute = o.onmute ? [{\n        fn: o.onmute\n      }] : [];\n      self._onvolume = o.onvolume ? [{\n        fn: o.onvolume\n      }] : [];\n      self._onrate = o.onrate ? [{\n        fn: o.onrate\n      }] : [];\n      self._onseek = o.onseek ? [{\n        fn: o.onseek\n      }] : [];\n      self._onunlock = o.onunlock ? [{\n        fn: o.onunlock\n      }] : [];\n      self._onresume = []; // Web Audio or HTML5 Audio?\n\n      self._webAudio = Howler.usingWebAudio && !self._html5; // Automatically try to enable audio.\n\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      } // Keep track of this Howl group in the global controller.\n\n\n      Howler._howls.push(self); // If they selected autoplay, add a play event to the load queue.\n\n\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play();\n          }\n        });\n      } // Load the source file unless otherwise specified.\n\n\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function load() {\n      var self = this;\n      var url = null; // If no audio is available, quit immediately.\n\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n\n        return;\n      } // Make sure our source is in an array.\n\n\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      } // Loop through the sources and pick the first one that is compatible.\n\n\n      for (var i = 0; i < self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n\n            continue;\n          } // Extract the file extension from the URL or base64 data URI.\n\n\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        } // Log a warning if no extension was found.\n\n\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        } // Check if this extension is available.\n\n\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading'; // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      } // Create a new sound object and add it to the pool.\n\n\n      new Sound(self); // Load and decode the audio data for playback.\n\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function play(sprite, internal) {\n      var self = this;\n      var id = null; // Determine if a sprite, sound id or nothing was passed\n\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default'; // Check if there is a single paused sound that isn't ended. \n        // If there is, play that sound. If not, continue as usual.  \n\n        if (!self._playLock) {\n          var num = 0;\n\n          for (var i = 0; i < self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      } // Get the selected node, or get one from the pool.\n\n\n      var sound = id ? self._soundById(id) : self._inactiveSound(); // If the sound doesn't exist, do nothing.\n\n      if (!sound) {\n        return null;\n      } // Select the sprite definition.\n\n\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      } // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n\n\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite; // Mark this sound as not ended in case another sound is played before this one loads.\n\n        sound._ended = false; // Add the sound to the queue to be played on load.\n\n        var soundId = sound._id;\n\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      } // Don't play the sound if an id was passed and it is already playing.\n\n\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      } // Make sure the AudioContext isn't suspended, and resume it if it is.\n\n\n      if (self._webAudio) {\n        Howler._autoResume();\n      } // Determine how long to play for and where to start playing.\n\n\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n      var timeout = duration * 1000 / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite; // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n\n      sound._ended = false; // Update the parameters of the sound.\n\n      var setParams = function setParams() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      }; // End the sound instantly if seek is at the end.\n\n\n      if (seek >= stop) {\n        self._ended(sound);\n\n        return;\n      } // Begin the actual playback.\n\n\n      var node = sound._node;\n\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function playWebAudio() {\n          self._playLock = false;\n          setParams();\n\n          self._refreshBuffer(sound); // Setup the playback params.\n\n\n          var vol = sound._muted || self._muted ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime; // Play the sound using the supported method.\n\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          } // Start a new timer if none is present.\n\n\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function () {\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self._playLock = true; // Wait for the audio context to resume before playing.\n\n          self.once('resume', playWebAudio); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function playHtml5() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate; // Some browsers will throw an error if this is called without user interaction.\n\n          try {\n            var play = node.play(); // Support older browsers that don't support promises, and thus don't have this issue.\n\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true; // Set param values immediately.\n\n              setParams(); // Releases the lock and executes queued actions.\n\n              play.then(function () {\n                self._playLock = false;\n                node._unlocked = true;\n\n                if (!internal) {\n                  self._emit('play', sound._id);\n\n                  self._loadQueue();\n                }\n              })[\"catch\"](function () {\n                self._playLock = false;\n\n                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.'); // Reset the ended and paused values.\n\n\n                sound._ended = true;\n                sound._paused = true;\n              });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            } // Setting rate before playing won't work in IE, so we set it again here.\n\n\n            node.playbackRate = sound._rate; // If the node is still paused, then we can assume there was a playback issue.\n\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n              return;\n            } // Setup the end timer on sprites or listen for the ended event.\n\n\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function () {\n                // Fire ended on this audio node.\n                self._ended(sound); // Clear this listener.\n\n\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        }; // If this is streaming audio, make sure the src is set and load again.\n\n\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        } // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n\n\n        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function listener() {\n            // Begin playback.\n            playHtml5(); // Clear this listener.\n\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n\n          node.addEventListener(Howler._canPlayEvent, listener, false); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function pause(id) {\n      var self = this; // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function action() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be paused.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              } // Clean up the buffer source.\n\n\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        } // Fire the pause event, unless `true` is passed as the 2nd argument.\n\n\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function stop(id, internal) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to stop when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function action() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be stopped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                } // Clean up the buffer source.\n\n\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n\n              sound._node.pause(); // If this is a live stream, stop download once the audio is stopped.\n\n\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function mute(muted, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to mute when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function action() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      } // If applying mute/unmute to all sounds, update the group's value.\n\n\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      } // If no id is passed, get all ID's to be muted.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted; // Cancel active fade and set the volume to the end value.\n\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function volume() {\n      var self = this;\n      var args = arguments;\n      var vol, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the volume or return the current volume.\n\n\n      var sound;\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function action() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group volume.\n\n\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol; // Stop currently running fades.\n\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function fade(from, to, len, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to fade when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function action() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      } // Make sure the to/from/len values are numbers.\n\n\n      from = parseFloat(from);\n      to = parseFloat(to);\n      len = parseFloat(len); // Set the volume to the start position.\n\n      self.volume(from, id); // Fade the volume of one or all sounds.\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]); // Create a linear fade or fall back to timeouts with HTML5 Audio.\n\n\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          } // If we are using Web Audio, let the native methods do the actual fade.\n\n\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + len / 1000;\n            sound._volume = from;\n\n            sound._node.gain.setValueAtTime(from, currentTime);\n\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function _startFadeInterval(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n      var lastTick = Date.now(); // Store the value being faded to.\n\n      sound._fadeTo = to; // Update the volume value on each interval tick.\n\n      sound._interval = setInterval(function () {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick; // Make sure the volume is in the right bounds.\n\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol); // Round to within 2 decimal points.\n\n        vol = Math.round(vol * 100) / 100; // Change the volume.\n\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        } // Set the group's volume.\n\n\n        if (isGroup) {\n          self._volume = vol;\n        } // When the fade is complete, stop it and fire event.\n\n\n        if (to < from && vol <= to || to > from && vol >= to) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function _stopFade(id) {\n      var self = this;\n\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function loop() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound; // Determine the values for loop and id.\n\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      } // If no id is passed, get all ID's to be looped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function rate() {\n      var self = this;\n      var args = arguments;\n      var rate, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the playback rate or return the current value.\n\n\n      var sound;\n\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function action() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group rate.\n\n\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n\n            sound._rate = rate; // Change the playback rate.\n\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            } // Reset the timers.\n\n\n            var seek = self.seek(id[i]);\n            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n            var timeout = duration * 1000 / Math.abs(sound._rate); // Start a new end timer if sound is already playing.\n\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function seek() {\n      var self = this;\n      var args = arguments;\n      var seek, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // If there is no ID, bail out.\n\n\n      if (typeof id === 'undefined') {\n        return self;\n      } // If the sound hasn't loaded, add it to the load queue to seek when capable.\n\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function action() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      } // Get the sound.\n\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n\n          if (playing) {\n            self.pause(id, true);\n          } // Move the position of the track and cancel timer.\n\n\n          sound._seek = seek;\n          sound._ended = false;\n\n          self._clearTimer(id); // Update the seek position for HTML5 Audio.\n\n\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          } // Seek and emit when ready.\n\n\n          var seekAndEmit = function seekAndEmit() {\n            self._emit('seek', id); // Restart the playback if the sound was playing.\n\n\n            if (playing) {\n              self.play(id, true);\n            }\n          }; // Wait for the play lock to be unset before emitting (HTML5 Audio).\n\n\n          if (playing && !self._webAudio) {\n            var emitSeek = function emitSeek() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function playing(id) {\n      var self = this; // Check the passed sound ID (if any).\n\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n\n        return sound ? !sound._paused : false;\n      } // Otherwise, loop through all sounds and check if any are playing.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function duration(id) {\n      var self = this;\n      var duration = self._duration; // If we pass an ID, get the sound and return the sprite length.\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function state() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function unload() {\n      var self = this; // Stop playing any active sounds.\n\n      var sounds = self._sounds;\n\n      for (var i = 0; i < sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        } // Remove the source or disconnect.\n\n\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node); // Remove any event listeners.\n\n\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false); // Release the Audio object back to the pool.\n\n\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        } // Empty out all of the nodes.\n\n\n        delete sounds[i]._node; // Make sure all timers are cleared out.\n\n        self._clearTimer(sounds[i]._id);\n      } // Remove the references in the global Howler object.\n\n\n      var index = Howler._howls.indexOf(self);\n\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      } // Delete this sound from the cache (if no other Howl is using it).\n\n\n      var remCache = true;\n\n      for (i = 0; i < Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      } // Clear global errors.\n\n\n      Howler.noAudio = false; // Clear out `self`.\n\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function on(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {\n          id: id,\n          fn: fn,\n          once: once\n        } : {\n          id: id,\n          fn: fn\n        });\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function off(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0; // Allow passing just an event and ID.\n\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i = 0; i < events.length; i++) {\n          var isId = id === events[i].id;\n\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n\n        for (i = 0; i < keys.length; i++) {\n          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function once(event, fn, id) {\n      var self = this; // Setup the event listener.\n\n      self.on(event, fn, id, 1);\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function _emit(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event]; // Loop through event store and fire all functions.\n\n      for (var i = events.length - 1; i >= 0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function (fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0); // If this event was setup with `once`, remove it.\n\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      } // Pass the event type into load queue so that it can continue stepping.\n\n\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function _loadQueue(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0]; // Remove this task if a matching event was passed.\n\n        if (task.event === event) {\n          self._queue.shift();\n\n          self._loadQueue();\n        } // Run the task if no event type is passed.\n\n\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function _ended(sound) {\n      var self = this;\n      var sprite = sound._sprite; // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      } // Should this sound loop?\n\n\n      var loop = !!(sound._loop || self._sprite[sprite][2]); // Fire the ended event.\n\n      self._emit('end', sound._id); // Restart the playback for HTML5 Audio loop.\n\n\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      } // Restart this timer if on a Web Audio loop.\n\n\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      } // Mark the node as paused.\n\n\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n\n        self._clearTimer(sound._id); // Clean up the buffer source.\n\n\n        self._cleanBuffer(sound._node); // Attempt to auto-suspend AudioContext if no sounds are still playing.\n\n\n        Howler._autoSuspend();\n      } // When using a sprite, end the track.\n\n\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function _clearTimer(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function _soundById(id) {\n      var self = this; // Loop through all sounds and find the one with this ID.\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function _inactiveSound() {\n      var self = this;\n\n      self._drain(); // Find the first inactive node to recycle.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      } // If no inactive node was found, create a new one.\n\n\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function _drain() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0; // If there are less sounds than the max pool size, we are done.\n\n      if (self._sounds.length < limit) {\n        return;\n      } // Count the number of inactive sounds.\n\n\n      for (i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      } // Remove excess inactive sounds, going in reverse order.\n\n\n      for (i = self._sounds.length - 1; i >= 0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          } // Remove sounds until we have the pool size.\n\n\n          self._sounds.splice(i, 1);\n\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function _getSoundIds(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n\n        for (var i = 0; i < self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function _refreshBuffer(sound) {\n      var self = this; // Setup the buffer source for playback.\n\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src]; // Connect to the correct node.\n\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      } // Setup looping and playback rate.\n\n\n      sound._node.bufferSource.loop = sound._loop;\n\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function _cleanBuffer(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n\n        if (isIOS) {\n          try {\n            node.bufferSource.buffer = Howler._scratchBuffer;\n          } catch (e) {}\n        }\n      }\n\n      node.bufferSource = null;\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function _clearSound(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n\n  var Sound = function Sound(howl) {\n    this._parent = howl;\n    this.init();\n  };\n\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function init() {\n      var self = this;\n      var parent = self._parent; // Setup the default parameters.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a unique ID for this sound.\n\n      self._id = ++Howler._counter; // Add itself to the parent's pool.\n\n      parent._sounds.push(self); // Create the new node.\n\n\n      self.create();\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function create() {\n      var self = this;\n      var parent = self._parent;\n      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n\n        self._node.paused = true;\n\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio(); // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n\n        self._errorFn = self._errorListener.bind(self);\n\n        self._node.addEventListener('error', self._errorFn, false); // Listen for 'canplaythrough' event to let us know the sound is ready.\n\n\n        self._loadFn = self._loadListener.bind(self);\n\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false); // Setup the new audio node.\n\n\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume(); // Begin loading the source.\n\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function reset() {\n      var self = this;\n      var parent = self._parent; // Reset all of the parameters of this sound.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a new ID so that it isn't confused with the previous sound.\n\n      self._id = ++Howler._counter;\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function _errorListener() {\n      var self = this; // Fire an error event and pass back the code.\n\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0); // Clear the event listener.\n\n\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function _loadListener() {\n      var self = this;\n      var parent = self._parent; // Round up the duration to account for the lower precision in HTML5 Audio.\n\n      parent._duration = Math.ceil(self._node.duration * 10) / 10; // Setup a sprite if none is defined.\n\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {\n          __default: [0, parent._duration * 1000]\n        };\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n\n        parent._emit('load');\n\n        parent._loadQueue();\n      } // Clear the event listener.\n\n\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  var cache = {};\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n\n  var loadBuffer = function loadBuffer(self) {\n    var url = self._src; // Check if the buffer has already been cached and use it instead.\n\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration; // Load the sound into this Howl.\n\n      loadSound(self);\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n\n      for (var i = 0; i < data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      xhr.onload = function () {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n\n      xhr.onerror = function () {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n\n      safeXhrSend(xhr);\n    }\n  };\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n\n\n  var safeXhrSend = function safeXhrSend(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n\n\n  var decodeAudioData = function decodeAudioData(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function error() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    }; // Load the sound on success.\n\n\n    var success = function success(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    }; // Decode the buffer into an audio source.\n\n\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success)[\"catch\"](error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n\n\n  var loadSound = function loadSound(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    } // Setup a sprite if none is defined.\n\n\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {\n        __default: [0, self._duration * 1000]\n      };\n    } // Fire the loaded event.\n\n\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n\n      self._emit('load');\n\n      self._loadQueue();\n    }\n  };\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n\n\n  var setupAudioContext = function setupAudioContext() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    } // Check if we are using Web Audio and setup the AudioContext if we are.\n\n\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch (e) {\n      Howler.usingWebAudio = false;\n    } // If the audio context creation still failed, set using web audio to false.\n\n\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    } // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n\n\n    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    } // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n\n\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    } // Re-run the setup on Howler.\n\n\n    Howler._setup();\n  }; // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } // Add support for CommonJS libraries such as browserify.\n\n\n  if (true) {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  } // Define globally in case AMD is not available or unused.\n\n\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') {\n    // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./app-core/UserInterface.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar UserInterface = /*#__PURE__*/function () {\n  function UserInterface() {\n    _classCallCheck(this, UserInterface);\n\n    this.screen = null;\n    this.topBarEl = null;\n    this.timeBarEl = null;\n    this.scoreEl = null;\n    this.levelEl = null;\n    this.levelNoEl = null;\n    this.levelPrefixEl = null;\n    this.dialogEl = null;\n    this.dialogPointsEl = null;\n    this.dialogPointsNoEl = null;\n    this.dialogSuffixEl = null;\n    this.controlsEl = null;\n    this.gameOverEl = null;\n    this.gameOverTextEl = null;\n    this.isActive = false;\n    this.ad = null;\n    this.willExit = false;\n  }\n\n  _createClass(UserInterface, [{\n    key: \"init\",\n    value: function init() {\n      //\n      // Top bar\n      //\n      this.topBarEl = document.createElement('div');\n      this.topBarEl.id = \"topbar\";\n      this.topBarEl.style.display = 'none';\n      this.topBarEl.style.background = \"url(assets/topbar.png)\";\n      this.topBarEl.style.zIndex = 9999;\n      this.topBarEl.style.width = '240px';\n      this.topBarEl.style.height = '44px';\n      this.topBarEl.style.position = 'absolute';\n      this.topBarEl.style.backgroundRepeat = 'no-repeat';\n      this.timeBarEl = document.createElement('div');\n      this.timeBarEl.id = \"timebar\";\n      this.timeBarEl.style.position = 'absolute';\n      this.timeBarEl.style.left = '12px';\n      this.timeBarEl.style.top = '12px';\n      this.timeBarEl.style.width = '84px';\n      this.timeBarEl.style.height = '20px';\n      this.timeBarEl.style.backgroundColor = '#FFFFFF';\n      this.scoreEl = document.createElement('div');\n      this.scoreEl.id = 'score';\n      this.scoreEl.innerText = '0 / 500';\n      this.scoreEl.style.width = '126px';\n      this.scoreEl.style.position = 'relative';\n      this.scoreEl.style.textAlign = 'right';\n      this.scoreEl.style.left = \"106px\";\n      this.scoreEl.style.top = \"12px\";\n      this.scoreEl.style.letterSpacing = \"2px\";\n      this.scoreEl.style.fontSize = \"17.5px\";\n      this.scoreEl.style.color = \"#FFFFFF\";\n      this.scoreEl.style.fontFamily = \"AADigits\";\n      this.levelEl = document.createElement('div');\n      this.levelEl.id = 'level-bar';\n      this.levelEl.style.position = 'relative';\n      this.levelEl.style.width = '228px';\n      this.levelEl.style.height = '25px';\n      this.levelEl.style.letterSpacing = \"2px\";\n      this.levelEl.style.fontSize = \"17.5px\";\n      this.levelEl.style.color = \"#FFFFFF\";\n      this.levelEl.style.backgroundColor = \"#000000\";\n      this.levelEl.style.fontFamily = \"AADigits\";\n      this.levelEl.style.textAlign = 'center';\n      this.levelEl.style.marginTop = '-10px';\n      this.levelEl.style.paddingTop = '4px';\n      this.levelEl.style.marginLeft = '6px';\n      this.levelEl.style.display = 'flex';\n      this.levelEl.style.justifyContent = 'center';\n      this.levelEl.style.lineHeight = '20px';\n      this.levelPrefixEl = document.createElement('img');\n      this.levelPrefixEl.id = \"level-prefix\";\n      this.levelPrefixEl.src = 'assets/level_prefix.png';\n      this.levelPrefixEl.style.paddingRight = '8px';\n      this.levelPrefixEl.style.height = '18px';\n      this.levelNoEl = document.createElement('span');\n      this.levelNoEl.id = 'level-number';\n      this.levelNoEl.innerText = '1';\n      this.levelEl.appendChild(this.levelPrefixEl);\n      this.levelEl.appendChild(this.levelNoEl);\n      this.topBarEl.appendChild(this.timeBarEl);\n      this.topBarEl.appendChild(this.scoreEl);\n      this.topBarEl.appendChild(this.levelEl); //\n      // Dialog\n      //\n\n      this.dialogEl = document.createElement('div');\n      this.dialogEl.id = \"dialog\";\n      this.dialogEl.style.display = 'none';\n      this.dialogEl.style.position = 'absolute';\n      this.dialogEl.style.zIndex = 9999;\n      this.dialogEl.style.width = '172px';\n      this.dialogEl.style.height = '192px';\n      this.dialogEl.style.marginLeft = '34px';\n      this.dialogEl.style.marginTop = '50px';\n      this.dialogEl.style.backgroundImage = 'url(assets/dialog_back.png)';\n      this.dialogEl.style.backgroundRepeat = 'no-repeat';\n      this.dialogPointsEl = document.createElement('div');\n      this.dialogPointsEl.style.width = \"100%\";\n      this.dialogPointsEl.style.letterSpacing = \"2px\";\n      this.dialogPointsEl.style.fontSize = \"17.5px\";\n      this.dialogPointsEl.style.color = \"#FFFFFF\";\n      this.dialogPointsEl.style.fontFamily = \"AADigits\";\n      this.dialogPointsEl.style.marginTop = '70px';\n      this.dialogPointsEl.style.textAlign = 'center';\n      this.dialogPointsEl.style.display = 'flex';\n      this.dialogPointsEl.style.justifyContent = 'center';\n      this.dialogPointsEl.style.lineHeight = '20px';\n      this.dialogPointsNoEl = document.createElement('span');\n      this.dialogPointsNoEl.id = 'dialog-points';\n      this.dialogPointsNoEl.innerText = '500';\n      this.dialogSuffixEl = document.createElement('img');\n      this.dialogSuffixEl.id = \"dialog-sufix\";\n      this.dialogSuffixEl.src = 'assets/points_suffix.png';\n      this.dialogSuffixEl.style.paddingLeft = '6px';\n      this.dialogPointsEl.appendChild(this.dialogPointsNoEl);\n      this.dialogPointsEl.appendChild(this.dialogSuffixEl);\n      this.dialogEl.appendChild(this.dialogPointsEl); //\n      // Controls\n      //\n\n      this.controlsEl = document.createElement('img');\n      this.controlsEl.id = 'controls';\n      this.controlsEl.src = 'assets/controls.png';\n      this.controlsEl.style.display = 'none';\n      this.controlsEl.style.position = 'absolute';\n      this.controlsEl.style.zIndex = 9999;\n      this.controlsEl.style.marginTop = '252px'; //\n      // Game Over Screen\n      //\n\n      this.gameOverEl = document.createElement('div');\n      this.gameOverEl.style.width = '240px';\n      this.gameOverEl.style.height = '320px';\n      this.gameOverEl.style.position = 'absolute';\n      this.gameOverEl.style.backgroundColor = '#000000';\n      this.gameOverEl.style.display = 'none';\n      this.gameOverEl.style.justifyContent = 'center';\n      this.gameOverEl.style.alignItems = 'center';\n      this.gameOverTextEl = document.createElement('img');\n      this.gameOverTextEl.src = 'assets/game_over.png';\n      this.gameOverTextEl.style.transition = 'opacity ease 2s';\n      this.gameOverTextEl.style.opacity = '0.0';\n      this.gameOverEl.appendChild(this.gameOverTextEl); //\n      // Appending to DOM\n      //\n\n      this.screen = document.getElementById('screen');\n      this.screen.appendChild(this.gameOverEl);\n      this.screen.appendChild(this.topBarEl);\n      this.screen.appendChild(this.dialogEl);\n      this.screen.appendChild(this.controlsEl);\n    }\n  }, {\n    key: \"showGameOver\",\n    value: function showGameOver() {\n      var _this = this;\n\n      this.topBarEl.style.visibility = 'hidden';\n      document.getElementById('MainCanvas').style.visibility = 'hidden';\n      this.topBarEl.style.visibility = 'hidden';\n      this.gameOverEl.style.display = 'flex';\n      setTimeout(function () {\n        return _this.gameOverTextEl.style.opacity = '1.0';\n      }, 500);\n      setTimeout(function () {\n        if (confirm(\"Try again?\")) {\n          _this.showAd();\n        } else {\n          _this.willExit = true;\n\n          _this.showAd();\n        }\n      }, 3000);\n    }\n  }, {\n    key: \"showAd\",\n    value: function showAd() {\n      if (this.ad) {\n        this.ad.call('display');\n      } else {\n        this.redirectUser();\n      }\n    }\n  }, {\n    key: \"redirectUser\",\n    value: function redirectUser() {\n      if (this.willExit) {\n        window.close();\n      } else {\n        location.reload();\n      }\n    }\n  }, {\n    key: \"prepareAd\",\n    value: function prepareAd() {\n      var _this2 = this;\n\n      if (window.getKaiAd) {\n        window.getKaiAd({\n          publisher: '98ce6faa-00cf-4756-b191-f7019c715e51',\n          app: 'Treasure Hunter',\n          test:  true ? 1 : undefined,\n          slot: 'Game Over Screen',\n          onerror: function onerror(err) {\n            return console.error('Got error when trying to fetch ad:', err);\n          },\n          onready: function onready(ad) {\n            _this2.ad = ad;\n\n            _this2.ad.on('close', function () {\n              return _this2.redirectUser();\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateScore\",\n    value: function updateScore(score, goal) {\n      this.scoreEl.innerText = \"\".concat(score, \" / \").concat(goal);\n\n      if (!this.isActive) {\n        this.dialogPointsNoEl.innerText = goal;\n      }\n    }\n  }, {\n    key: \"updateLevel\",\n    value: function updateLevel(level) {\n      this.levelNoEl.innerText = level;\n      this.levelEl.style.display = 'flex';\n    }\n  }, {\n    key: \"updateTime\",\n    value: function updateTime(remainingTime, maxTime) {\n      // The reason behind this crazy formula is that I want \n      // it to unfill by scaled pixes (2 real pixels) at a time.\n      if (remainingTime >= 0) {\n        this.timeBarEl.style.width = \"\".concat(Math.round(remainingTime * 42 / maxTime) * 2, \"px\");\n      }\n    }\n  }, {\n    key: \"hideDialog\",\n    value: function hideDialog() {\n      this.dialogEl.style.display = 'none';\n      this.controlsEl.style.display = 'none';\n      this.levelEl.style.display = 'none';\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.topBarEl.style.removeProperty('display');\n      this.dialogEl.style.removeProperty('display');\n      this.controlsEl.style.removeProperty('display');\n      this.isActive = true;\n    }\n  }]);\n\n  return UserInterface;\n}();\n\n/* harmony default export */ var app_core_UserInterface = (new UserInterface());\n// EXTERNAL MODULE: ./app-core/libs/howler.js\nvar howler = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./app-core/AssetLoader.js\nfunction AssetLoader_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction AssetLoader_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AssetLoader_createClass(Constructor, protoProps, staticProps) { if (protoProps) AssetLoader_defineProperties(Constructor.prototype, protoProps); if (staticProps) AssetLoader_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar AssetLoader_AssetLoader = /*#__PURE__*/function () {\n  function AssetLoader() {\n    AssetLoader_classCallCheck(this, AssetLoader);\n\n    this.images = {};\n    this.sounds = {};\n    this.imageFiles = {\n      dig: 'assets/dig.png',\n      idle: 'assets/idle.png',\n      move: 'assets/move.png',\n      hurt: 'assets/hurt.png',\n      dirt: 'assets/dirt.png',\n      fire: 'assets/fire.png',\n      scorpion: 'assets/scorpion.png',\n      sky: 'assets/sky.png',\n      dithering: 'assets/dithering.png',\n      ground: 'assets/ground.png',\n      treasure0: 'assets/treasure0.png',\n      treasure1: 'assets/treasure1.png',\n      treasure2: 'assets/treasure2.png',\n      treasure3: 'assets/treasure3.png',\n      treasure4: 'assets/treasure4.png',\n      treasure5: 'assets/treasure5.png',\n      treasure6: 'assets/treasure6.png',\n      title: 'assets/title.png',\n      topbar: 'assets/topbar.png',\n      dialog_back: 'assets/dialog_back.png',\n      points_suffix: 'assets/points_suffix.png',\n      level_prefix: 'assets/level_prefix.png',\n      controls: 'assets/controls.png'\n    };\n    this.soundFiles = {\n      start: 'assets/snd_start.wav',\n      dig: 'assets/snd_dig.wav',\n      good: 'assets/snd_good.wav',\n      hurt: 'assets/snd_hurt.wav',\n      step: 'assets/snd_step.wav',\n      loose: 'assets/snd_loose.wav'\n    };\n  }\n\n  AssetLoader_createClass(AssetLoader, [{\n    key: \"load\",\n    value: function load() {\n      var digitFont = new FontFace('AADigits', 'url(assets/aadigits.ttf)');\n      digitFont.load().then(function (loadedFont) {\n        document.fonts.add(loadedFont);\n      });\n      var imagesLoaded = new Promise(function (resolve, reject) {\n        document.addEventListener('allimagesloaded', function () {\n          return resolve();\n        });\n      });\n      var soundsLoaded = new Promise(function (resolve, reject) {\n        document.addEventListener('allsoundsloaded', function () {\n          return resolve();\n        });\n      });\n      this.loadImages();\n      this.loadSounds();\n      return Promise.all([imagesLoaded, soundsLoaded]);\n    }\n  }, {\n    key: \"playSound\",\n    value: function playSound(name) {\n      var rate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var id = this.sounds[name].play();\n\n      if (rate !== 1) {\n        this.sounds[name].rate(rate, id);\n      }\n    }\n  }, {\n    key: \"loadSounds\",\n    value: function loadSounds() {\n      var noSounds = Object.keys(this.soundFiles).length;\n      var loadedSoundsCount = 0;\n\n      for (var name in this.soundFiles) {\n        this.sounds[name] = new Howl({\n          src: [this.soundFiles[name]],\n          volume: 0.8\n        });\n        this.sounds[name].once('load', function () {\n          loadedSoundsCount += 1;\n\n          if (loadedSoundsCount === noSounds) {\n            document.dispatchEvent(new Event('allsoundsloaded'));\n          }\n        });\n      }\n    }\n  }, {\n    key: \"loadImages\",\n    value: function loadImages() {\n      var noImages = Object.keys(this.imageFiles).length;\n      var loadedImageCount = 0;\n\n      for (var image in this.imageFiles) {\n        this.images[image] = new Image();\n        this.images[image].src = this.imageFiles[image];\n\n        this.images[image].onload = function () {\n          loadedImageCount += 1;\n\n          if (loadedImageCount === noImages) {\n            document.dispatchEvent(new Event('allimagesloaded'));\n          }\n        };\n      }\n    }\n  }]);\n\n  return AssetLoader;\n}();\n\n/* harmony default export */ var app_core_AssetLoader = (new AssetLoader_AssetLoader());\n// CONCATENATED MODULE: ./app-core/libs/m4.js\n/*\n * Copyright 2014, Gregg Tavares.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Gregg Tavares. nor the names of his\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Various 3d math functions.\n *\n * @module webgl-3d-math\n */\n/* harmony default export */ var libs_m4 = ((function () {\n  /**\n   * An array or typed array with 3 values.\n   * @typedef {number[]|TypedArray} Vector3\n   * @memberOf module:webgl-3d-math\n   */\n\n  /**\n   * An array or typed array with 4 values.\n   * @typedef {number[]|TypedArray} Vector4\n   * @memberOf module:webgl-3d-math\n   */\n\n  /**\n   * An array or typed array with 16 values.\n   * @typedef {number[]|TypedArray} Matrix4\n   * @memberOf module:webgl-3d-math\n   */\n  var MatType = Float32Array;\n  /**\n   * Sets the type this library creates for a Mat4\n   * @param {constructor} Ctor the constructor for the type. Either `Float32Array` or `Array`\n   * @return {constructor} previous constructor for Mat4\n   */\n\n  function setDefaultType(Ctor) {\n    var OldType = MatType;\n    MatType = Ctor;\n    return OldType;\n  }\n  /**\n   * Takes two 4-by-4 matrices, a and b, and computes the product in the order\n   * that pre-composes b with a.  In other words, the matrix returned will\n   * transform by b first and then a.  Note this is subtly different from just\n   * multiplying the matrices together.  For given a and b, this function returns\n   * the same object in both row-major and column-major mode.\n   * @param {Matrix4} a A matrix.\n   * @param {Matrix4} b A matrix.\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   */\n\n\n  function multiply(a, b, dst) {\n    dst = dst || new MatType(16);\n    var b00 = b[0 * 4 + 0];\n    var b01 = b[0 * 4 + 1];\n    var b02 = b[0 * 4 + 2];\n    var b03 = b[0 * 4 + 3];\n    var b10 = b[1 * 4 + 0];\n    var b11 = b[1 * 4 + 1];\n    var b12 = b[1 * 4 + 2];\n    var b13 = b[1 * 4 + 3];\n    var b20 = b[2 * 4 + 0];\n    var b21 = b[2 * 4 + 1];\n    var b22 = b[2 * 4 + 2];\n    var b23 = b[2 * 4 + 3];\n    var b30 = b[3 * 4 + 0];\n    var b31 = b[3 * 4 + 1];\n    var b32 = b[3 * 4 + 2];\n    var b33 = b[3 * 4 + 3];\n    var a00 = a[0 * 4 + 0];\n    var a01 = a[0 * 4 + 1];\n    var a02 = a[0 * 4 + 2];\n    var a03 = a[0 * 4 + 3];\n    var a10 = a[1 * 4 + 0];\n    var a11 = a[1 * 4 + 1];\n    var a12 = a[1 * 4 + 2];\n    var a13 = a[1 * 4 + 3];\n    var a20 = a[2 * 4 + 0];\n    var a21 = a[2 * 4 + 1];\n    var a22 = a[2 * 4 + 2];\n    var a23 = a[2 * 4 + 3];\n    var a30 = a[3 * 4 + 0];\n    var a31 = a[3 * 4 + 1];\n    var a32 = a[3 * 4 + 2];\n    var a33 = a[3 * 4 + 3];\n    dst[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\n    dst[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\n    dst[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\n    dst[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\n    dst[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\n    dst[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\n    dst[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\n    dst[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\n    dst[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\n    dst[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\n    dst[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\n    dst[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\n    dst[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\n    dst[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\n    dst[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\n    dst[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\n    return dst;\n  }\n  /**\n   * adds 2 vectors3s\n   * @param {Vector3} a a\n   * @param {Vector3} b b\n   * @param {Vector3} dst optional vector3 to store result\n   * @return {Vector3} dst or new Vector3 if not provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function addVectors(a, b, dst) {\n    dst = dst || new MatType(3);\n    dst[0] = a[0] + b[0];\n    dst[1] = a[1] + b[1];\n    dst[2] = a[2] + b[2];\n    return dst;\n  }\n  /**\n   * subtracts 2 vectors3s\n   * @param {Vector3} a a\n   * @param {Vector3} b b\n   * @param {Vector3} dst optional vector3 to store result\n   * @return {Vector3} dst or new Vector3 if not provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function subtractVectors(a, b, dst) {\n    dst = dst || new MatType(3);\n    dst[0] = a[0] - b[0];\n    dst[1] = a[1] - b[1];\n    dst[2] = a[2] - b[2];\n    return dst;\n  }\n  /**\n   * normalizes a vector.\n   * @param {Vector3} v vector to normalize\n   * @param {Vector3} dst optional vector3 to store result\n   * @return {Vector3} dst or new Vector3 if not provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function normalize(v, dst) {\n    dst = dst || new MatType(3);\n    var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]); // make sure we don't divide by 0.\n\n    if (length > 0.00001) {\n      dst[0] = v[0] / length;\n      dst[1] = v[1] / length;\n      dst[2] = v[2] / length;\n    }\n\n    return dst;\n  }\n  /**\n   * Computes the length of a vector\n   * @param {Vector3} v vector to take length of\n   * @return {number} length of vector\n   */\n\n\n  function length(v) {\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n  }\n  /**\n   * Computes the cross product of 2 vectors3s\n   * @param {Vector3} a a\n   * @param {Vector3} b b\n   * @param {Vector3} dst optional vector3 to store result\n   * @return {Vector3} dst or new Vector3 if not provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function cross(a, b, dst) {\n    dst = dst || new MatType(3);\n    dst[0] = a[1] * b[2] - a[2] * b[1];\n    dst[1] = a[2] * b[0] - a[0] * b[2];\n    dst[2] = a[0] * b[1] - a[1] * b[0];\n    return dst;\n  }\n  /**\n   * Computes the dot product of two vectors; assumes both vectors have\n   * three entries.\n   * @param {Vector3} a Operand vector.\n   * @param {Vector3} b Operand vector.\n   * @return {number} dot product\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  /**\n   * Computes the distance squared between 2 points\n   * @param {Vector3} a\n   * @param {Vector3} b\n   * @return {number} distance squared between a and b\n   */\n\n\n  function distanceSq(a, b) {\n    var dx = a[0] - b[0];\n    var dy = a[1] - b[1];\n    var dz = a[2] - b[2];\n    return dx * dx + dy * dy + dz * dz;\n  }\n  /**\n   * Computes the distance between 2 points\n   * @param {Vector3} a\n   * @param {Vector3} b\n   * @return {number} distance between a and b\n   */\n\n\n  function distance(a, b) {\n    return Math.sqrt(distanceSq(a, b));\n  }\n  /**\n   * Makes an identity matrix.\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function identity(dst) {\n    dst = dst || new MatType(16);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n  }\n  /**\n   * Transposes a matrix.\n   * @param {Matrix4} m matrix to transpose.\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function transpose(m, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = m[0];\n    dst[1] = m[4];\n    dst[2] = m[8];\n    dst[3] = m[12];\n    dst[4] = m[1];\n    dst[5] = m[5];\n    dst[6] = m[9];\n    dst[7] = m[13];\n    dst[8] = m[2];\n    dst[9] = m[6];\n    dst[10] = m[10];\n    dst[11] = m[14];\n    dst[12] = m[3];\n    dst[13] = m[7];\n    dst[14] = m[11];\n    dst[15] = m[15];\n    return dst;\n  }\n  /**\n   * Creates a lookAt matrix.\n   * This is a world matrix for a camera. In other words it will transform\n   * from the origin to a place and orientation in the world. For a view\n   * matrix take the inverse of this.\n   * @param {Vector3} cameraPosition position of the camera\n   * @param {Vector3} target position of the target\n   * @param {Vector3} up direction\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function lookAt(cameraPosition, target, up, dst) {\n    dst = dst || new MatType(16);\n    var zAxis = normalize(subtractVectors(cameraPosition, target));\n    var xAxis = normalize(cross(up, zAxis));\n    var yAxis = normalize(cross(zAxis, xAxis));\n    dst[0] = xAxis[0];\n    dst[1] = xAxis[1];\n    dst[2] = xAxis[2];\n    dst[3] = 0;\n    dst[4] = yAxis[0];\n    dst[5] = yAxis[1];\n    dst[6] = yAxis[2];\n    dst[7] = 0;\n    dst[8] = zAxis[0];\n    dst[9] = zAxis[1];\n    dst[10] = zAxis[2];\n    dst[11] = 0;\n    dst[12] = cameraPosition[0];\n    dst[13] = cameraPosition[1];\n    dst[14] = cameraPosition[2];\n    dst[15] = 1;\n    return dst;\n  }\n  /**\n   * Computes a 4-by-4 perspective transformation matrix given the angular height\n   * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n   * arguments define a frustum extending in the negative z direction.  The given\n   * angle is the vertical angle of the frustum, and the horizontal angle is\n   * determined to produce the given aspect ratio.  The arguments near and far are\n   * the distances to the near and far clipping planes.  Note that near and far\n   * are not z coordinates, but rather they are distances along the negative\n   * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n   * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n   * from -1 to 1 in the z dimension.\n   * @param {number} fieldOfViewInRadians field of view in y axis.\n   * @param {number} aspect aspect of viewport (width / height)\n   * @param {number} near near Z clipping plane\n   * @param {number} far far Z clipping plane\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function perspective(fieldOfViewInRadians, aspect, near, far, dst) {\n    dst = dst || new MatType(16);\n    var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians);\n    var rangeInv = 1.0 / (near - far);\n    dst[0] = f / aspect;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = f;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = (near + far) * rangeInv;\n    dst[11] = -1;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = near * far * rangeInv * 2;\n    dst[15] = 0;\n    return dst;\n  }\n  /**\n   * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\n   * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\n   * generated sends that box to the unit box.  Note that although left and right\n   * are x coordinates and bottom and top are y coordinates, near and far\n   * are not z coordinates, but rather they are distances along the negative\n   * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\n   * dimensions and from -1 to 1 in the z dimension.\n   * @param {number} left The x coordinate of the left plane of the box.\n   * @param {number} right The x coordinate of the right plane of the box.\n   * @param {number} bottom The y coordinate of the bottom plane of the box.\n   * @param {number} top The y coordinate of the right plane of the box.\n   * @param {number} near The negative z coordinate of the near plane of the box.\n   * @param {number} far The negative z coordinate of the far plane of the box.\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function orthographic(left, right, bottom, top, near, far, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = 2 / (right - left);\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 2 / (top - bottom);\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 2 / (near - far);\n    dst[11] = 0;\n    dst[12] = (left + right) / (left - right);\n    dst[13] = (bottom + top) / (bottom - top);\n    dst[14] = (near + far) / (near - far);\n    dst[15] = 1;\n    return dst;\n  }\n  /**\n   * Computes a 4-by-4 perspective transformation matrix given the left, right,\n   * top, bottom, near and far clipping planes. The arguments define a frustum\n   * extending in the negative z direction. The arguments near and far are the\n   * distances to the near and far clipping planes. Note that near and far are not\n   * z coordinates, but rather they are distances along the negative z-axis. The\n   * matrix generated sends the viewing frustum to the unit box. We assume a unit\n   * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\n   * dimension.\n   * @param {number} left The x coordinate of the left plane of the box.\n   * @param {number} right The x coordinate of the right plane of the box.\n   * @param {number} bottom The y coordinate of the bottom plane of the box.\n   * @param {number} top The y coordinate of the right plane of the box.\n   * @param {number} near The negative z coordinate of the near plane of the box.\n   * @param {number} far The negative z coordinate of the far plane of the box.\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function frustum(left, right, bottom, top, near, far, dst) {\n    dst = dst || new MatType(16);\n    var dx = right - left;\n    var dy = top - bottom;\n    var dz = far - near;\n    dst[0] = 2 * near / dx;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 2 * near / dy;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = (left + right) / dx;\n    dst[9] = (top + bottom) / dy;\n    dst[10] = -(far + near) / dz;\n    dst[11] = -1;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = -2 * near * far / dz;\n    dst[15] = 0;\n    return dst;\n  }\n  /**\n   * Makes a translation matrix\n   * @param {number} tx x translation.\n   * @param {number} ty y translation.\n   * @param {number} tz z translation.\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function translation(tx, ty, tz, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = tx;\n    dst[13] = ty;\n    dst[14] = tz;\n    dst[15] = 1;\n    return dst;\n  }\n  /**\n   * Multiply by translation matrix.\n   * @param {Matrix4} m matrix to multiply\n   * @param {number} tx x translation.\n   * @param {number} ty y translation.\n   * @param {number} tz z translation.\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function translate(m, tx, ty, tz, dst) {\n    // This is the optimized version of\n    // return multiply(m, translation(tx, ty, tz), dst);\n    dst = dst || new MatType(16);\n    var m00 = m[0];\n    var m01 = m[1];\n    var m02 = m[2];\n    var m03 = m[3];\n    var m10 = m[1 * 4 + 0];\n    var m11 = m[1 * 4 + 1];\n    var m12 = m[1 * 4 + 2];\n    var m13 = m[1 * 4 + 3];\n    var m20 = m[2 * 4 + 0];\n    var m21 = m[2 * 4 + 1];\n    var m22 = m[2 * 4 + 2];\n    var m23 = m[2 * 4 + 3];\n    var m30 = m[3 * 4 + 0];\n    var m31 = m[3 * 4 + 1];\n    var m32 = m[3 * 4 + 2];\n    var m33 = m[3 * 4 + 3];\n\n    if (m !== dst) {\n      dst[0] = m00;\n      dst[1] = m01;\n      dst[2] = m02;\n      dst[3] = m03;\n      dst[4] = m10;\n      dst[5] = m11;\n      dst[6] = m12;\n      dst[7] = m13;\n      dst[8] = m20;\n      dst[9] = m21;\n      dst[10] = m22;\n      dst[11] = m23;\n    }\n\n    dst[12] = m00 * tx + m10 * ty + m20 * tz + m30;\n    dst[13] = m01 * tx + m11 * ty + m21 * tz + m31;\n    dst[14] = m02 * tx + m12 * ty + m22 * tz + m32;\n    dst[15] = m03 * tx + m13 * ty + m23 * tz + m33;\n    return dst;\n  }\n  /**\n   * Makes an x rotation matrix\n   * @param {number} angleInRadians amount to rotate\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function xRotation(angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = c;\n    dst[6] = s;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = -s;\n    dst[10] = c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n  }\n  /**\n   * Multiply by an x rotation matrix\n   * @param {Matrix4} m matrix to multiply\n   * @param {number} angleInRadians amount to rotate\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function xRotate(m, angleInRadians, dst) {\n    // this is the optimized version of\n    // return multiply(m, xRotation(angleInRadians), dst);\n    dst = dst || new MatType(16);\n    var m10 = m[4];\n    var m11 = m[5];\n    var m12 = m[6];\n    var m13 = m[7];\n    var m20 = m[8];\n    var m21 = m[9];\n    var m22 = m[10];\n    var m23 = m[11];\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    dst[4] = c * m10 + s * m20;\n    dst[5] = c * m11 + s * m21;\n    dst[6] = c * m12 + s * m22;\n    dst[7] = c * m13 + s * m23;\n    dst[8] = c * m20 - s * m10;\n    dst[9] = c * m21 - s * m11;\n    dst[10] = c * m22 - s * m12;\n    dst[11] = c * m23 - s * m13;\n\n    if (m !== dst) {\n      dst[0] = m[0];\n      dst[1] = m[1];\n      dst[2] = m[2];\n      dst[3] = m[3];\n      dst[12] = m[12];\n      dst[13] = m[13];\n      dst[14] = m[14];\n      dst[15] = m[15];\n    }\n\n    return dst;\n  }\n  /**\n   * Makes an y rotation matrix\n   * @param {number} angleInRadians amount to rotate\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function yRotation(angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    dst[0] = c;\n    dst[1] = 0;\n    dst[2] = -s;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = s;\n    dst[9] = 0;\n    dst[10] = c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n  }\n  /**\n   * Multiply by an y rotation matrix\n   * @param {Matrix4} m matrix to multiply\n   * @param {number} angleInRadians amount to rotate\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function yRotate(m, angleInRadians, dst) {\n    // this is the optimized version of\n    // return multiply(m, yRotation(angleInRadians), dst);\n    dst = dst || new MatType(16);\n    var m00 = m[0 * 4 + 0];\n    var m01 = m[0 * 4 + 1];\n    var m02 = m[0 * 4 + 2];\n    var m03 = m[0 * 4 + 3];\n    var m20 = m[2 * 4 + 0];\n    var m21 = m[2 * 4 + 1];\n    var m22 = m[2 * 4 + 2];\n    var m23 = m[2 * 4 + 3];\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    dst[0] = c * m00 - s * m20;\n    dst[1] = c * m01 - s * m21;\n    dst[2] = c * m02 - s * m22;\n    dst[3] = c * m03 - s * m23;\n    dst[8] = c * m20 + s * m00;\n    dst[9] = c * m21 + s * m01;\n    dst[10] = c * m22 + s * m02;\n    dst[11] = c * m23 + s * m03;\n\n    if (m !== dst) {\n      dst[4] = m[4];\n      dst[5] = m[5];\n      dst[6] = m[6];\n      dst[7] = m[7];\n      dst[12] = m[12];\n      dst[13] = m[13];\n      dst[14] = m[14];\n      dst[15] = m[15];\n    }\n\n    return dst;\n  }\n  /**\n   * Makes an z rotation matrix\n   * @param {number} angleInRadians amount to rotate\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function zRotation(angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    dst[0] = c;\n    dst[1] = s;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = -s;\n    dst[5] = c;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n  }\n  /**\n   * Multiply by an z rotation matrix\n   * @param {Matrix4} m matrix to multiply\n   * @param {number} angleInRadians amount to rotate\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function zRotate(m, angleInRadians, dst) {\n    // This is the optimized version of\n    // return multiply(m, zRotation(angleInRadians), dst);\n    dst = dst || new MatType(16);\n    var m00 = m[0 * 4 + 0];\n    var m01 = m[0 * 4 + 1];\n    var m02 = m[0 * 4 + 2];\n    var m03 = m[0 * 4 + 3];\n    var m10 = m[1 * 4 + 0];\n    var m11 = m[1 * 4 + 1];\n    var m12 = m[1 * 4 + 2];\n    var m13 = m[1 * 4 + 3];\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    dst[0] = c * m00 + s * m10;\n    dst[1] = c * m01 + s * m11;\n    dst[2] = c * m02 + s * m12;\n    dst[3] = c * m03 + s * m13;\n    dst[4] = c * m10 - s * m00;\n    dst[5] = c * m11 - s * m01;\n    dst[6] = c * m12 - s * m02;\n    dst[7] = c * m13 - s * m03;\n\n    if (m !== dst) {\n      dst[8] = m[8];\n      dst[9] = m[9];\n      dst[10] = m[10];\n      dst[11] = m[11];\n      dst[12] = m[12];\n      dst[13] = m[13];\n      dst[14] = m[14];\n      dst[15] = m[15];\n    }\n\n    return dst;\n  }\n  /**\n   * Makes an rotation matrix around an arbitrary axis\n   * @param {Vector3} axis axis to rotate around\n   * @param {number} angleInRadians amount to rotate\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function axisRotation(axis, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    var x = axis[0];\n    var y = axis[1];\n    var z = axis[2];\n    var n = Math.sqrt(x * x + y * y + z * z);\n    x /= n;\n    y /= n;\n    z /= n;\n    var xx = x * x;\n    var yy = y * y;\n    var zz = z * z;\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    var oneMinusCosine = 1 - c;\n    dst[0] = xx + (1 - xx) * c;\n    dst[1] = x * y * oneMinusCosine + z * s;\n    dst[2] = x * z * oneMinusCosine - y * s;\n    dst[3] = 0;\n    dst[4] = x * y * oneMinusCosine - z * s;\n    dst[5] = yy + (1 - yy) * c;\n    dst[6] = y * z * oneMinusCosine + x * s;\n    dst[7] = 0;\n    dst[8] = x * z * oneMinusCosine + y * s;\n    dst[9] = y * z * oneMinusCosine - x * s;\n    dst[10] = zz + (1 - zz) * c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n  }\n  /**\n   * Multiply by an axis rotation matrix\n   * @param {Matrix4} m matrix to multiply\n   * @param {Vector3} axis axis to rotate around\n   * @param {number} angleInRadians amount to rotate\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function axisRotate(m, axis, angleInRadians, dst) {\n    // This is the optimized version of\n    // return multiply(m, axisRotation(axis, angleInRadians), dst);\n    dst = dst || new MatType(16);\n    var x = axis[0];\n    var y = axis[1];\n    var z = axis[2];\n    var n = Math.sqrt(x * x + y * y + z * z);\n    x /= n;\n    y /= n;\n    z /= n;\n    var xx = x * x;\n    var yy = y * y;\n    var zz = z * z;\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    var oneMinusCosine = 1 - c;\n    var r00 = xx + (1 - xx) * c;\n    var r01 = x * y * oneMinusCosine + z * s;\n    var r02 = x * z * oneMinusCosine - y * s;\n    var r10 = x * y * oneMinusCosine - z * s;\n    var r11 = yy + (1 - yy) * c;\n    var r12 = y * z * oneMinusCosine + x * s;\n    var r20 = x * z * oneMinusCosine + y * s;\n    var r21 = y * z * oneMinusCosine - x * s;\n    var r22 = zz + (1 - zz) * c;\n    var m00 = m[0];\n    var m01 = m[1];\n    var m02 = m[2];\n    var m03 = m[3];\n    var m10 = m[4];\n    var m11 = m[5];\n    var m12 = m[6];\n    var m13 = m[7];\n    var m20 = m[8];\n    var m21 = m[9];\n    var m22 = m[10];\n    var m23 = m[11];\n    dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n    dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n    dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n    dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n    dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n    dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n    dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n    dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n    dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n    dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n    dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n    dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n    if (m !== dst) {\n      dst[12] = m[12];\n      dst[13] = m[13];\n      dst[14] = m[14];\n      dst[15] = m[15];\n    }\n\n    return dst;\n  }\n  /**\n   * Makes a scale matrix\n   * @param {number} sx x scale.\n   * @param {number} sy y scale.\n   * @param {number} sz z scale.\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function scaling(sx, sy, sz, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = sx;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = sy;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = sz;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n  }\n  /**\n   * Multiply by a scaling matrix\n   * @param {Matrix4} m matrix to multiply\n   * @param {number} sx x scale.\n   * @param {number} sy y scale.\n   * @param {number} sz z scale.\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function scale(m, sx, sy, sz, dst) {\n    // This is the optimized version of\n    // return multiply(m, scaling(sx, sy, sz), dst);\n    dst = dst || new MatType(16);\n    dst[0] = sx * m[0 * 4 + 0];\n    dst[1] = sx * m[0 * 4 + 1];\n    dst[2] = sx * m[0 * 4 + 2];\n    dst[3] = sx * m[0 * 4 + 3];\n    dst[4] = sy * m[1 * 4 + 0];\n    dst[5] = sy * m[1 * 4 + 1];\n    dst[6] = sy * m[1 * 4 + 2];\n    dst[7] = sy * m[1 * 4 + 3];\n    dst[8] = sz * m[2 * 4 + 0];\n    dst[9] = sz * m[2 * 4 + 1];\n    dst[10] = sz * m[2 * 4 + 2];\n    dst[11] = sz * m[2 * 4 + 3];\n\n    if (m !== dst) {\n      dst[12] = m[12];\n      dst[13] = m[13];\n      dst[14] = m[14];\n      dst[15] = m[15];\n    }\n\n    return dst;\n  }\n  /**\n   * creates a matrix from translation, quaternion, scale\n   * @param {Number[]} translation [x, y, z] translation\n   * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\n   * @param {Number[]} scale [x, y, z] scale\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   */\n\n\n  function compose(translation, quaternion, scale, dst) {\n    dst = dst || new MatType(16);\n    var x = quaternion[0];\n    var y = quaternion[1];\n    var z = quaternion[2];\n    var w = quaternion[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var xy = x * y2;\n    var xz = x * z2;\n    var yy = y * y2;\n    var yz = y * z2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    var sx = scale[0];\n    var sy = scale[1];\n    var sz = scale[2];\n    dst[0] = (1 - (yy + zz)) * sx;\n    dst[1] = (xy + wz) * sx;\n    dst[2] = (xz - wy) * sx;\n    dst[3] = 0;\n    dst[4] = (xy - wz) * sy;\n    dst[5] = (1 - (xx + zz)) * sy;\n    dst[6] = (yz + wx) * sy;\n    dst[7] = 0;\n    dst[8] = (xz + wy) * sz;\n    dst[9] = (yz - wx) * sz;\n    dst[10] = (1 - (xx + yy)) * sz;\n    dst[11] = 0;\n    dst[12] = translation[0];\n    dst[13] = translation[1];\n    dst[14] = translation[2];\n    dst[15] = 1;\n    return dst;\n  }\n\n  function quatFromRotationMatrix(m, dst) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    var m11 = m[0];\n    var m12 = m[4];\n    var m13 = m[8];\n    var m21 = m[1];\n    var m22 = m[5];\n    var m23 = m[9];\n    var m31 = m[2];\n    var m32 = m[6];\n    var m33 = m[10];\n    var trace = m11 + m22 + m33;\n\n    if (trace > 0) {\n      var s = 0.5 / Math.sqrt(trace + 1);\n      dst[3] = 0.25 / s;\n      dst[0] = (m32 - m23) * s;\n      dst[1] = (m13 - m31) * s;\n      dst[2] = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      var _s = 2 * Math.sqrt(1 + m11 - m22 - m33);\n\n      dst[3] = (m32 - m23) / _s;\n      dst[0] = 0.25 * _s;\n      dst[1] = (m12 + m21) / _s;\n      dst[2] = (m13 + m31) / _s;\n    } else if (m22 > m33) {\n      var _s2 = 2 * Math.sqrt(1 + m22 - m11 - m33);\n\n      dst[3] = (m13 - m31) / _s2;\n      dst[0] = (m12 + m21) / _s2;\n      dst[1] = 0.25 * _s2;\n      dst[2] = (m23 + m32) / _s2;\n    } else {\n      var _s3 = 2 * Math.sqrt(1 + m33 - m11 - m22);\n\n      dst[3] = (m21 - m12) / _s3;\n      dst[0] = (m13 + m31) / _s3;\n      dst[1] = (m23 + m32) / _s3;\n      dst[2] = 0.25 * _s3;\n    }\n  }\n\n  function decompose(mat, translation, quaternion, scale) {\n    var sx = m4.length(mat.slice(0, 3));\n    var sy = m4.length(mat.slice(4, 7));\n    var sz = m4.length(mat.slice(8, 11)); // if determinate is negative, we need to invert one scale\n\n    var det = determinate(mat);\n\n    if (det < 0) {\n      sx = -sx;\n    }\n\n    translation[0] = mat[12];\n    translation[1] = mat[13];\n    translation[2] = mat[14]; // scale the rotation part\n\n    var matrix = m4.copy(mat);\n    var invSX = 1 / sx;\n    var invSY = 1 / sy;\n    var invSZ = 1 / sz;\n    matrix[0] *= invSX;\n    matrix[1] *= invSX;\n    matrix[2] *= invSX;\n    matrix[4] *= invSY;\n    matrix[5] *= invSY;\n    matrix[6] *= invSY;\n    matrix[8] *= invSZ;\n    matrix[9] *= invSZ;\n    matrix[10] *= invSZ;\n    quatFromRotationMatrix(matrix, quaternion);\n    scale[0] = sx;\n    scale[1] = sy;\n    scale[2] = sz;\n  }\n\n  function determinate(m) {\n    var m00 = m[0 * 4 + 0];\n    var m01 = m[0 * 4 + 1];\n    var m02 = m[0 * 4 + 2];\n    var m03 = m[0 * 4 + 3];\n    var m10 = m[1 * 4 + 0];\n    var m11 = m[1 * 4 + 1];\n    var m12 = m[1 * 4 + 2];\n    var m13 = m[1 * 4 + 3];\n    var m20 = m[2 * 4 + 0];\n    var m21 = m[2 * 4 + 1];\n    var m22 = m[2 * 4 + 2];\n    var m23 = m[2 * 4 + 3];\n    var m30 = m[3 * 4 + 0];\n    var m31 = m[3 * 4 + 1];\n    var m32 = m[3 * 4 + 2];\n    var m33 = m[3 * 4 + 3];\n    var tmp_0 = m22 * m33;\n    var tmp_1 = m32 * m23;\n    var tmp_2 = m12 * m33;\n    var tmp_3 = m32 * m13;\n    var tmp_4 = m12 * m23;\n    var tmp_5 = m22 * m13;\n    var tmp_6 = m02 * m33;\n    var tmp_7 = m32 * m03;\n    var tmp_8 = m02 * m23;\n    var tmp_9 = m22 * m03;\n    var tmp_10 = m02 * m13;\n    var tmp_11 = m12 * m03;\n    var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n    var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n    var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n    var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n    return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n  }\n  /**\n   * Computes the inverse of a matrix.\n   * @param {Matrix4} m matrix to compute inverse of\n   * @param {Matrix4} [dst] optional matrix to store result\n   * @return {Matrix4} dst or a new matrix if none provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function inverse(m, dst) {\n    dst = dst || new MatType(16);\n    var m00 = m[0 * 4 + 0];\n    var m01 = m[0 * 4 + 1];\n    var m02 = m[0 * 4 + 2];\n    var m03 = m[0 * 4 + 3];\n    var m10 = m[1 * 4 + 0];\n    var m11 = m[1 * 4 + 1];\n    var m12 = m[1 * 4 + 2];\n    var m13 = m[1 * 4 + 3];\n    var m20 = m[2 * 4 + 0];\n    var m21 = m[2 * 4 + 1];\n    var m22 = m[2 * 4 + 2];\n    var m23 = m[2 * 4 + 3];\n    var m30 = m[3 * 4 + 0];\n    var m31 = m[3 * 4 + 1];\n    var m32 = m[3 * 4 + 2];\n    var m33 = m[3 * 4 + 3];\n    var tmp_0 = m22 * m33;\n    var tmp_1 = m32 * m23;\n    var tmp_2 = m12 * m33;\n    var tmp_3 = m32 * m13;\n    var tmp_4 = m12 * m23;\n    var tmp_5 = m22 * m13;\n    var tmp_6 = m02 * m33;\n    var tmp_7 = m32 * m03;\n    var tmp_8 = m02 * m23;\n    var tmp_9 = m22 * m03;\n    var tmp_10 = m02 * m13;\n    var tmp_11 = m12 * m03;\n    var tmp_12 = m20 * m31;\n    var tmp_13 = m30 * m21;\n    var tmp_14 = m10 * m31;\n    var tmp_15 = m30 * m11;\n    var tmp_16 = m10 * m21;\n    var tmp_17 = m20 * m11;\n    var tmp_18 = m00 * m31;\n    var tmp_19 = m30 * m01;\n    var tmp_20 = m00 * m21;\n    var tmp_21 = m20 * m01;\n    var tmp_22 = m00 * m11;\n    var tmp_23 = m10 * m01;\n    var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n    var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n    var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n    var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n    var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n    dst[0] = d * t0;\n    dst[1] = d * t1;\n    dst[2] = d * t2;\n    dst[3] = d * t3;\n    dst[4] = d * (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n    dst[5] = d * (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n    dst[6] = d * (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n    dst[7] = d * (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n    dst[8] = d * (tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33 - (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n    dst[9] = d * (tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33 - (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n    dst[10] = d * (tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33 - (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n    dst[11] = d * (tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23 - (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n    dst[12] = d * (tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12 - (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n    dst[13] = d * (tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22 - (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n    dst[14] = d * (tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02 - (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n    dst[15] = d * (tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12 - (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n    return dst;\n  }\n  /**\n   * Takes a  matrix and a vector with 4 entries, transforms that vector by\n   * the matrix, and returns the result as a vector with 4 entries.\n   * @param {Matrix4} m The matrix.\n   * @param {Vector4} v The point in homogenous coordinates.\n   * @param {Vector4} dst optional vector4 to store result\n   * @return {Vector4} dst or new Vector4 if not provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function transformVector(m, v, dst) {\n    dst = dst || new MatType(4);\n\n    for (var i = 0; i < 4; ++i) {\n      dst[i] = 0.0;\n\n      for (var j = 0; j < 4; ++j) {\n        dst[i] += v[j] * m[j * 4 + i];\n      }\n    }\n\n    return dst;\n  }\n  /**\n   * Takes a 4-by-4 matrix and a vector with 3 entries,\n   * interprets the vector as a point, transforms that point by the matrix, and\n   * returns the result as a vector with 3 entries.\n   * @param {Matrix4} m The matrix.\n   * @param {Vector3} v The point.\n   * @param {Vector4} dst optional vector4 to store result\n   * @return {Vector4} dst or new Vector4 if not provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function transformPoint(m, v, dst) {\n    dst = dst || new MatType(3);\n    var v0 = v[0];\n    var v1 = v[1];\n    var v2 = v[2];\n    var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n    dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n    dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n    dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n    return dst;\n  }\n  /**\n   * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n   * direction, transforms that direction by the matrix, and returns the result;\n   * assumes the transformation of 3-dimensional space represented by the matrix\n   * is parallel-preserving, i.e. any combination of rotation, scaling and\n   * translation, but not a perspective distortion. Returns a vector with 3\n   * entries.\n   * @param {Matrix4} m The matrix.\n   * @param {Vector3} v The direction.\n   * @param {Vector4} dst optional vector4 to store result\n   * @return {Vector4} dst or new Vector4 if not provided\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function transformDirection(m, v, dst) {\n    dst = dst || new MatType(3);\n    var v0 = v[0];\n    var v1 = v[1];\n    var v2 = v[2];\n    dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n    dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n    dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n    return dst;\n  }\n  /**\n   * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n   * as a normal to a surface, and computes a vector which is normal upon\n   * transforming that surface by the matrix. The effect of this function is the\n   * same as transforming v (as a direction) by the inverse-transpose of m.  This\n   * function assumes the transformation of 3-dimensional space represented by the\n   * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n   * translation, but not a perspective distortion.  Returns a vector with 3\n   * entries.\n   * @param {Matrix4} m The matrix.\n   * @param {Vector3} v The normal.\n   * @param {Vector3} [dst] The direction.\n   * @return {Vector3} The transformed direction.\n   * @memberOf module:webgl-3d-math\n   */\n\n\n  function transformNormal(m, v, dst) {\n    dst = dst || new MatType(3);\n    var mi = inverse(m);\n    var v0 = v[0];\n    var v1 = v[1];\n    var v2 = v[2];\n    dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n    dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n    dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n    return dst;\n  }\n\n  function copy(src, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = src[0];\n    dst[1] = src[1];\n    dst[2] = src[2];\n    dst[3] = src[3];\n    dst[4] = src[4];\n    dst[5] = src[5];\n    dst[6] = src[6];\n    dst[7] = src[7];\n    dst[8] = src[8];\n    dst[9] = src[9];\n    dst[10] = src[10];\n    dst[11] = src[11];\n    dst[12] = src[12];\n    dst[13] = src[13];\n    dst[14] = src[14];\n    dst[15] = src[15];\n    return dst;\n  }\n\n  return {\n    copy: copy,\n    lookAt: lookAt,\n    addVectors: addVectors,\n    subtractVectors: subtractVectors,\n    distance: distance,\n    distanceSq: distanceSq,\n    normalize: normalize,\n    compose: compose,\n    cross: cross,\n    decompose: decompose,\n    dot: dot,\n    identity: identity,\n    transpose: transpose,\n    length: length,\n    orthographic: orthographic,\n    frustum: frustum,\n    perspective: perspective,\n    translation: translation,\n    translate: translate,\n    xRotation: xRotation,\n    yRotation: yRotation,\n    zRotation: zRotation,\n    xRotate: xRotate,\n    yRotate: yRotate,\n    zRotate: zRotate,\n    axisRotation: axisRotation,\n    axisRotate: axisRotate,\n    scaling: scaling,\n    scale: scale,\n    multiply: multiply,\n    inverse: inverse,\n    transformVector: transformVector,\n    transformPoint: transformPoint,\n    transformDirection: transformDirection,\n    transformNormal: transformNormal,\n    setDefaultType: setDefaultType\n  };\n})());\n// CONCATENATED MODULE: ./app-core/libs/webgl-utils.js\n/*\n * Copyright 2012, Gregg Tavares.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Gregg Tavares. nor the names of his\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// (function(root, factory) {  // eslint-disable-line\n//   if (typeof define === 'function' && define.amd) {\n//     // AMD. Register as an anonymous module.\n//     define([], function() {\n//       return factory.call(root);\n//     });\n//   } else {\n//     // Browser globals\n//     root.webglUtils = factory.call(root);\n//   }\n/* harmony default export */ var webgl_utils = ((function () {\n  /** @module webgl-utils */\n\n  /**\n   * Wrapped logging function.\n   * @param {string} msg The message to log.\n   */\n  function error(msg) {\n    console.log(msg);\n  }\n  /**\n   * Error Callback\n   * @callback ErrorCallback\n   * @param {string} msg error message.\n   * @memberOf module:webgl-utils\n   */\n\n  /**\n   * Loads a shader.\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n   * @param {string} shaderSource The shader source.\n   * @param {number} shaderType The type of shader.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\n   * @return {WebGLShader} The created shader.\n   */\n\n\n  function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n    var errFn = opt_errorCallback || error; // Create the shader object\n\n    var shader = gl.createShader(shaderType); // Load the shader source\n\n    gl.shaderSource(shader, shaderSource); // Compile the shader\n\n    gl.compileShader(shader); // Check the compile status\n\n    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (!compiled) {\n      // Something went wrong during compilation; get the error\n      var lastError = gl.getShaderInfoLog(shader);\n      errFn('*** Error compiling shader \\'' + shader + '\\':' + lastError);\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n  /**\n   * Creates a program, attaches shaders, binds attrib locations, links the\n   * program and calls useProgram.\n   * @param {WebGLShader[]} shaders The shaders to attach\n   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n   *        on error. If you want something else pass an callback. It's passed an error message.\n   * @memberOf module:webgl-utils\n   */\n\n\n  function createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n    var errFn = opt_errorCallback || error;\n    var program = gl.createProgram();\n    shaders.forEach(function (shader) {\n      gl.attachShader(program, shader);\n    });\n\n    if (opt_attribs) {\n      opt_attribs.forEach(function (attrib, ndx) {\n        gl.bindAttribLocation(program, opt_locations ? opt_locations[ndx] : ndx, attrib);\n      });\n    }\n\n    gl.linkProgram(program); // Check the link status\n\n    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n    if (!linked) {\n      // something went wrong with the link\n      var lastError = gl.getProgramInfoLog(program);\n      errFn('Error in program linking:' + lastError);\n      gl.deleteProgram(program);\n      return null;\n    }\n\n    return program;\n  }\n  /**\n   * Loads a shader from a script tag.\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n   * @param {string} scriptId The id of the script tag.\n   * @param {number} opt_shaderType The type of shader. If not passed in it will\n   *     be derived from the type of the script tag.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\n   * @return {WebGLShader} The created shader.\n   */\n\n\n  function createShaderFromScript(gl, scriptId, opt_shaderType, opt_errorCallback) {\n    var shaderSource = '';\n    var shaderType;\n    var shaderScript = document.getElementById(scriptId);\n\n    if (!shaderScript) {\n      throw '*** Error: unknown script element' + scriptId;\n    }\n\n    shaderSource = shaderScript.text;\n\n    if (!opt_shaderType) {\n      if (shaderScript.type === 'x-shader/x-vertex') {\n        shaderType = gl.VERTEX_SHADER;\n      } else if (shaderScript.type === 'x-shader/x-fragment') {\n        shaderType = gl.FRAGMENT_SHADER;\n      } else if (shaderType !== gl.VERTEX_SHADER && shaderType !== gl.FRAGMENT_SHADER) {\n        throw '*** Error: unknown shader type';\n      }\n    }\n\n    return loadShader(gl, shaderSource, opt_shaderType ? opt_shaderType : shaderType, opt_errorCallback);\n  }\n\n  var defaultShaderType = ['VERTEX_SHADER', 'FRAGMENT_SHADER'];\n  /**\n   * Creates a program from 2 script tags.\n   *\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n   *        to use.\n   * @param {string[]} shaderScriptIds Array of ids of the script\n   *        tags for the shaders. The first is assumed to be the\n   *        vertex shader, the second the fragment shader.\n   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n   *        on error. If you want something else pass an callback. It's passed an error message.\n   * @return {WebGLProgram} The created program.\n   * @memberOf module:webgl-utils\n   */\n\n  function createProgramFromScripts(gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n    var shaders = [];\n\n    for (var ii = 0; ii < shaderScriptIds.length; ++ii) {\n      shaders.push(createShaderFromScript(gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], opt_errorCallback));\n    }\n\n    return createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback);\n  }\n  /**\n   * Creates a program from 2 sources.\n   *\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n   *        to use.\n   * @param {string[]} shaderSourcess Array of sources for the\n   *        shaders. The first is assumed to be the vertex shader,\n   *        the second the fragment shader.\n   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n   *        on error. If you want something else pass an callback. It's passed an error message.\n   * @return {WebGLProgram} The created program.\n   * @memberOf module:webgl-utils\n   */\n\n\n  function createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n    var shaders = [];\n\n    for (var ii = 0; ii < shaderSources.length; ++ii) {\n      shaders.push(loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], opt_errorCallback));\n    }\n\n    return createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback);\n  }\n  /**\n   * Returns the corresponding bind point for a given sampler type\n   */\n\n\n  function getBindPointForSamplerType(gl, type) {\n    if (type === gl.SAMPLER_2D) return gl.TEXTURE_2D; // eslint-disable-line\n\n    if (type === gl.SAMPLER_CUBE) return gl.TEXTURE_CUBE_MAP; // eslint-disable-line\n\n    return undefined;\n  }\n  /**\n   * @typedef {Object.<string, function>} Setters\n   */\n\n  /**\n   * Creates setter functions for all uniforms of a shader\n   * program.\n   *\n   * @see {@link module:webgl-utils.setUniforms}\n   *\n   * @param {WebGLProgram} program the program to create setters for.\n   * @returns {Object.<string, function>} an object with a setter by name for each uniform\n   * @memberOf module:webgl-utils\n   */\n\n\n  function createUniformSetters(gl, program) {\n    var textureUnit = 0;\n    /**\n     * Creates a setter for a uniform of the given program with it's\n     * location embedded in the setter.\n     * @param {WebGLProgram} program\n     * @param {WebGLUniformInfo} uniformInfo\n     * @returns {function} the created setter.\n     */\n\n    function createUniformSetter(program, uniformInfo) {\n      var location = gl.getUniformLocation(program, uniformInfo.name);\n      var type = uniformInfo.type; // Check if this uniform is an array\n\n      var isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\n\n      if (type === gl.FLOAT && isArray) {\n        return function (v) {\n          gl.uniform1fv(location, v);\n        };\n      }\n\n      if (type === gl.FLOAT) {\n        return function (v) {\n          gl.uniform1f(location, v);\n        };\n      }\n\n      if (type === gl.FLOAT_VEC2) {\n        return function (v) {\n          gl.uniform2fv(location, v);\n        };\n      }\n\n      if (type === gl.FLOAT_VEC3) {\n        return function (v) {\n          gl.uniform3fv(location, v);\n        };\n      }\n\n      if (type === gl.FLOAT_VEC4) {\n        return function (v) {\n          gl.uniform4fv(location, v);\n        };\n      }\n\n      if (type === gl.INT && isArray) {\n        return function (v) {\n          gl.uniform1iv(location, v);\n        };\n      }\n\n      if (type === gl.INT) {\n        return function (v) {\n          gl.uniform1i(location, v);\n        };\n      }\n\n      if (type === gl.INT_VEC2) {\n        return function (v) {\n          gl.uniform2iv(location, v);\n        };\n      }\n\n      if (type === gl.INT_VEC3) {\n        return function (v) {\n          gl.uniform3iv(location, v);\n        };\n      }\n\n      if (type === gl.INT_VEC4) {\n        return function (v) {\n          gl.uniform4iv(location, v);\n        };\n      }\n\n      if (type === gl.BOOL) {\n        return function (v) {\n          gl.uniform1iv(location, v);\n        };\n      }\n\n      if (type === gl.BOOL_VEC2) {\n        return function (v) {\n          gl.uniform2iv(location, v);\n        };\n      }\n\n      if (type === gl.BOOL_VEC3) {\n        return function (v) {\n          gl.uniform3iv(location, v);\n        };\n      }\n\n      if (type === gl.BOOL_VEC4) {\n        return function (v) {\n          gl.uniform4iv(location, v);\n        };\n      }\n\n      if (type === gl.FLOAT_MAT2) {\n        return function (v) {\n          gl.uniformMatrix2fv(location, false, v);\n        };\n      }\n\n      if (type === gl.FLOAT_MAT3) {\n        return function (v) {\n          gl.uniformMatrix3fv(location, false, v);\n        };\n      }\n\n      if (type === gl.FLOAT_MAT4) {\n        return function (v) {\n          gl.uniformMatrix4fv(location, false, v);\n        };\n      }\n\n      if ((type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) && isArray) {\n        var units = [];\n\n        for (var ii = 0; ii < info.size; ++ii) {\n          units.push(textureUnit++);\n        }\n\n        return function (bindPoint, units) {\n          return function (textures) {\n            gl.uniform1iv(location, units);\n            textures.forEach(function (texture, index) {\n              gl.activeTexture(gl.TEXTURE0 + units[index]);\n              gl.bindTexture(bindPoint, texture);\n            });\n          };\n        }(getBindPointForSamplerType(gl, type), units);\n      }\n\n      if (type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) {\n        return function (bindPoint, unit) {\n          return function (texture) {\n            gl.uniform1i(location, unit);\n            gl.activeTexture(gl.TEXTURE0 + unit);\n            gl.bindTexture(bindPoint, texture);\n          };\n        }(getBindPointForSamplerType(gl, type), textureUnit++);\n      }\n\n      throw 'unknown type: 0x' + type.toString(16); // we should never get here.\n    }\n\n    var uniformSetters = {};\n    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (var ii = 0; ii < numUniforms; ++ii) {\n      var uniformInfo = gl.getActiveUniform(program, ii);\n\n      if (!uniformInfo) {\n        break;\n      }\n\n      var _name = uniformInfo.name; // remove the array suffix.\n\n      if (_name.substr(-3) === '[0]') {\n        _name = _name.substr(0, _name.length - 3);\n      }\n\n      var setter = createUniformSetter(program, uniformInfo);\n      uniformSetters[_name] = setter;\n    }\n\n    return uniformSetters;\n  }\n  /**\n   * Set uniforms and binds related textures.\n   *\n   * Example:\n   *\n   *     let programInfo = createProgramInfo(\n   *         gl, [\"some-vs\", \"some-fs\"]);\n   *\n   *     let tex1 = gl.createTexture();\n   *     let tex2 = gl.createTexture();\n   *\n   *     ... assume we setup the textures with data ...\n   *\n   *     let uniforms = {\n   *       u_someSampler: tex1,\n   *       u_someOtherSampler: tex2,\n   *       u_someColor: [1,0,0,1],\n   *       u_somePosition: [0,1,1],\n   *       u_someMatrix: [\n   *         1,0,0,0,\n   *         0,1,0,0,\n   *         0,0,1,0,\n   *         0,0,0,0,\n   *       ],\n   *     };\n   *\n   *     gl.useProgram(program);\n   *\n   * This will automatically bind the textures AND set the\n   * uniforms.\n   *\n   *     setUniforms(programInfo.uniformSetters, uniforms);\n   *\n   * For the example above it is equivalent to\n   *\n   *     let texUnit = 0;\n   *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n   *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n   *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n   *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n   *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n   *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n   *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n   *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n   *     gl.uniformMatrix4fv(u_someMatrix, false, [\n   *         1,0,0,0,\n   *         0,1,0,0,\n   *         0,0,1,0,\n   *         0,0,0,0,\n   *       ]);\n   *\n   * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n   *\n   *     let uniforms = {\n   *       u_someSampler: tex1,\n   *       u_someOtherSampler: tex2,\n   *     };\n   *\n   *     let moreUniforms {\n   *       u_someColor: [1,0,0,1],\n   *       u_somePosition: [0,1,1],\n   *       u_someMatrix: [\n   *         1,0,0,0,\n   *         0,1,0,0,\n   *         0,0,1,0,\n   *         0,0,0,0,\n   *       ],\n   *     };\n   *\n   *     setUniforms(programInfo.uniformSetters, uniforms);\n   *     setUniforms(programInfo.uniformSetters, moreUniforms);\n   *\n   * @param {Object.<string, function>|module:webgl-utils.ProgramInfo} setters the setters returned from\n   *        `createUniformSetters` or a ProgramInfo from {@link module:webgl-utils.createProgramInfo}.\n   * @param {Object.<string, value>} an object with values for the\n   *        uniforms.\n   * @memberOf module:webgl-utils\n   */\n\n\n  function setUniforms(setters, values) {\n    setters = setters.uniformSetters || setters;\n    Object.keys(values).forEach(function (name) {\n      var setter = setters[name];\n\n      if (setter) {\n        setter(values[name]);\n      }\n    });\n  }\n  /**\n   * Creates setter functions for all attributes of a shader\n   * program. You can pass this to {@link module:webgl-utils.setBuffersAndAttributes} to set all your buffers and attributes.\n   *\n   * @see {@link module:webgl-utils.setAttributes} for example\n   * @param {WebGLProgram} program the program to create setters for.\n   * @return {Object.<string, function>} an object with a setter for each attribute by name.\n   * @memberOf module:webgl-utils\n   */\n\n\n  function createAttributeSetters(gl, program) {\n    var attribSetters = {};\n\n    function createAttribSetter(index) {\n      return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(index);\n        gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n      };\n    }\n\n    var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (var ii = 0; ii < numAttribs; ++ii) {\n      var attribInfo = gl.getActiveAttrib(program, ii);\n\n      if (!attribInfo) {\n        break;\n      }\n\n      var index = gl.getAttribLocation(program, attribInfo.name);\n      attribSetters[attribInfo.name] = createAttribSetter(index);\n    }\n\n    return attribSetters;\n  }\n  /**\n   * Sets attributes and binds buffers (deprecated... use {@link module:webgl-utils.setBuffersAndAttributes})\n   *\n   * Example:\n   *\n   *     let program = createProgramFromScripts(\n   *         gl, [\"some-vs\", \"some-fs\"]);\n   *\n   *     let attribSetters = createAttributeSetters(program);\n   *\n   *     let positionBuffer = gl.createBuffer();\n   *     let texcoordBuffer = gl.createBuffer();\n   *\n   *     let attribs = {\n   *       a_position: {buffer: positionBuffer, numComponents: 3},\n   *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n   *     };\n   *\n   *     gl.useProgram(program);\n   *\n   * This will automatically bind the buffers AND set the\n   * attributes.\n   *\n   *     setAttributes(attribSetters, attribs);\n   *\n   * Properties of attribs. For each attrib you can add\n   * properties:\n   *\n   * *   type: the type of data in the buffer. Default = gl.FLOAT\n   * *   normalize: whether or not to normalize the data. Default = false\n   * *   stride: the stride. Default = 0\n   * *   offset: offset into the buffer. Default = 0\n   *\n   * For example if you had 3 value float positions, 2 value\n   * float texcoord and 4 value uint8 colors you'd setup your\n   * attribs like this\n   *\n   *     let attribs = {\n   *       a_position: {buffer: positionBuffer, numComponents: 3},\n   *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n   *       a_color: {\n   *         buffer: colorBuffer,\n   *         numComponents: 4,\n   *         type: gl.UNSIGNED_BYTE,\n   *         normalize: true,\n   *       },\n   *     };\n   *\n   * @param {Object.<string, function>|model:webgl-utils.ProgramInfo} setters Attribute setters as returned from createAttributeSetters or a ProgramInfo as returned {@link module:webgl-utils.createProgramInfo}\n   * @param {Object.<string, module:webgl-utils.AttribInfo>} attribs AttribInfos mapped by attribute name.\n   * @memberOf module:webgl-utils\n   * @deprecated use {@link module:webgl-utils.setBuffersAndAttributes}\n   */\n\n\n  function setAttributes(setters, attribs) {\n    setters = setters.attribSetters || setters;\n    Object.keys(attribs).forEach(function (name) {\n      var setter = setters[name];\n\n      if (setter) {\n        setter(attribs[name]);\n      }\n    });\n  }\n  /**\n   * Creates a vertex array object and then sets the attributes\n   * on it\n   *\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n   *        to use.\n   * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n   * @param {Object.<string, module:webgl-utils.AttribInfo>} attribs AttribInfos mapped by attribute name.\n   * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n   */\n\n\n  function createVAOAndSetAttributes(gl, setters, attribs, indices) {\n    var vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    setAttributes(setters, attribs);\n\n    if (indices) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n    } // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n    // like when creating buffers for other stuff will mess up this VAO's binding\n\n\n    gl.bindVertexArray(null);\n    return vao;\n  }\n  /**\n   * Creates a vertex array object and then sets the attributes\n   * on it\n   *\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n   *        to use.\n   * @param {Object.<string, function>| module:webgl-utils.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n   * @param {module:webgl-utils:BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n   * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n   */\n\n\n  function createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n    return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n  }\n  /**\n   * @typedef {Object} ProgramInfo\n   * @property {WebGLProgram} program A shader program\n   * @property {Object<string, function>} uniformSetters: object of setters as returned from createUniformSetters,\n   * @property {Object<string, function>} attribSetters: object of setters as returned from createAttribSetters,\n   * @memberOf module:webgl-utils\n   */\n\n  /**\n   * Creates a ProgramInfo from 2 sources.\n   *\n   * A ProgramInfo contains\n   *\n   *     programInfo = {\n   *        program: WebGLProgram,\n   *        uniformSetters: object of setters as returned from createUniformSetters,\n   *        attribSetters: object of setters as returned from createAttribSetters,\n   *     }\n   *\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n   *        to use.\n   * @param {string[]} shaderSourcess Array of sources for the\n   *        shaders or ids. The first is assumed to be the vertex shader,\n   *        the second the fragment shader.\n   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n   *        on error. If you want something else pass an callback. It's passed an error message.\n   * @return {module:webgl-utils.ProgramInfo} The created program.\n   * @memberOf module:webgl-utils\n   */\n\n\n  function createProgramInfo(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n    shaderSources = shaderSources.map(function (source) {\n      var script = document.getElementById(source);\n      return script ? script.text : source;\n    });\n    var program = webglUtils.createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);\n\n    if (!program) {\n      return null;\n    }\n\n    var uniformSetters = createUniformSetters(gl, program);\n    var attribSetters = createAttributeSetters(gl, program);\n    return {\n      program: program,\n      uniformSetters: uniformSetters,\n      attribSetters: attribSetters\n    };\n  }\n  /**\n   * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n   *\n   * Example:\n   *\n   *     let programInfo = createProgramInfo(\n   *         gl, [\"some-vs\", \"some-fs\"]);\n   *\n   *     let arrays = {\n   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n   *     };\n   *\n   *     let bufferInfo = createBufferInfoFromArrays(gl, arrays);\n   *\n   *     gl.useProgram(programInfo.program);\n   *\n   * This will automatically bind the buffers AND set the\n   * attributes.\n   *\n   *     setBuffersAndAttributes(programInfo.attribSetters, bufferInfo);\n   *\n   * For the example above it is equivilent to\n   *\n   *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n   *     gl.enableVertexAttribArray(a_positionLocation);\n   *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n   *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n   *     gl.enableVertexAttribArray(a_texcoordLocation);\n   *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n   *\n   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n   * @param {Object.<string, function>} setters Attribute setters as returned from `createAttributeSetters`\n   * @param {module:webgl-utils.BufferInfo} buffers a BufferInfo as returned from `createBufferInfoFromArrays`.\n   * @memberOf module:webgl-utils\n   */\n\n\n  function setBuffersAndAttributes(gl, setters, buffers) {\n    setAttributes(setters, buffers.attribs);\n\n    if (buffers.indices) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n    }\n  } // Add your prefix here.\n\n\n  var browserPrefixes = ['', 'MOZ_', 'OP_', 'WEBKIT_'];\n  /**\n   * Given an extension name like WEBGL_compressed_texture_s3tc\n   * returns the supported version extension, like\n   * WEBKIT_WEBGL_compressed_teture_s3tc\n   * @param {string} name Name of extension to look for\n   * @return {WebGLExtension} The extension or undefined if not\n   *     found.\n   * @memberOf module:webgl-utils\n   */\n\n  function getExtensionWithKnownPrefixes(gl, name) {\n    for (var ii = 0; ii < browserPrefixes.length; ++ii) {\n      var prefixedName = browserPrefixes[ii] + name;\n      var ext = gl.getExtension(prefixedName);\n\n      if (ext) {\n        return ext;\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Resize a canvas to match the size its displayed.\n   * @param {HTMLCanvasElement} canvas The canvas to resize.\n   * @param {number} [multiplier] amount to multiply by.\n   *    Pass in window.devicePixelRatio for native pixels.\n   * @return {boolean} true if the canvas was resized.\n   * @memberOf module:webgl-utils\n   */\n\n\n  function resizeCanvasToDisplaySize(canvas, multiplier) {\n    multiplier = multiplier || 1;\n    var width = canvas.clientWidth * multiplier | 0;\n    var height = canvas.clientHeight * multiplier | 0;\n\n    if (canvas.width !== width || canvas.height !== height) {\n      canvas.width = width;\n      canvas.height = height;\n      return true;\n    }\n\n    return false;\n  } // Add `push` to a typed array. It just keeps a 'cursor'\n  // and allows use to `push` values into the array so we\n  // don't have to manually compute offsets\n\n\n  function augmentTypedArray(typedArray, numComponents) {\n    var cursor = 0;\n\n    typedArray.push = function () {\n      for (var ii = 0; ii < arguments.length; ++ii) {\n        var value = arguments[ii];\n\n        if (value instanceof Array || value.buffer && value.buffer instanceof ArrayBuffer) {\n          for (var jj = 0; jj < value.length; ++jj) {\n            typedArray[cursor++] = value[jj];\n          }\n        } else {\n          typedArray[cursor++] = value;\n        }\n      }\n    };\n\n    typedArray.reset = function (opt_index) {\n      cursor = opt_index || 0;\n    };\n\n    typedArray.numComponents = numComponents;\n    Object.defineProperty(typedArray, 'numElements', {\n      get: function get() {\n        return this.length / this.numComponents | 0;\n      }\n    });\n    return typedArray;\n  }\n  /**\n   * creates a typed array with a `push` function attached\n   * so that you can easily *push* values.\n   *\n   * `push` can take multiple arguments. If an argument is an array each element\n   * of the array will be added to the typed array.\n   *\n   * Example:\n   *\n   *     let array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n   *     array.push(1, 2, 3);\n   *     array.push([4, 5, 6]);\n   *     // array now contains [1, 2, 3, 4, 5, 6]\n   *\n   * Also has `numComponents` and `numElements` properties.\n   *\n   * @param {number} numComponents number of components\n   * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n   * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n   * @return {ArrayBuffer} A typed array.\n   * @memberOf module:webgl-utils\n   */\n\n\n  function createAugmentedTypedArray(numComponents, numElements, opt_type) {\n    var Type = opt_type || Float32Array;\n    return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n  }\n\n  function createBufferFromTypedArray(gl, array, type, drawType) {\n    type = type || gl.ARRAY_BUFFER;\n    var buffer = gl.createBuffer();\n    gl.bindBuffer(type, buffer);\n    gl.bufferData(type, array, drawType || gl.STATIC_DRAW);\n    return buffer;\n  }\n\n  function allButIndices(name) {\n    return name !== 'indices';\n  }\n\n  function createMapping(obj) {\n    var mapping = {};\n    Object.keys(obj).filter(allButIndices).forEach(function (key) {\n      mapping['a_' + key] = key;\n    });\n    return mapping;\n  }\n\n  function getGLTypeForTypedArray(gl, typedArray) {\n    if (typedArray instanceof Int8Array) {\n      return gl.BYTE;\n    } // eslint-disable-line\n\n\n    if (typedArray instanceof Uint8Array) {\n      return gl.UNSIGNED_BYTE;\n    } // eslint-disable-line\n\n\n    if (typedArray instanceof Int16Array) {\n      return gl.SHORT;\n    } // eslint-disable-line\n\n\n    if (typedArray instanceof Uint16Array) {\n      return gl.UNSIGNED_SHORT;\n    } // eslint-disable-line\n\n\n    if (typedArray instanceof Int32Array) {\n      return gl.INT;\n    } // eslint-disable-line\n\n\n    if (typedArray instanceof Uint32Array) {\n      return gl.UNSIGNED_INT;\n    } // eslint-disable-line\n\n\n    if (typedArray instanceof Float32Array) {\n      return gl.FLOAT;\n    } // eslint-disable-line\n\n\n    throw 'unsupported typed array type';\n  } // This is really just a guess. Though I can't really imagine using\n  // anything else? Maybe for some compression?\n\n\n  function getNormalizationForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n      return true;\n    } // eslint-disable-line\n\n\n    if (typedArray instanceof Uint8Array) {\n      return true;\n    } // eslint-disable-line\n\n\n    return false;\n  }\n\n  function isArrayBuffer(a) {\n    return a.buffer && a.buffer instanceof ArrayBuffer;\n  }\n\n  function guessNumComponentsFromName(name, length) {\n    var numComponents;\n\n    if (name.indexOf('coord') >= 0) {\n      numComponents = 2;\n    } else if (name.indexOf('color') >= 0) {\n      numComponents = 4;\n    } else {\n      numComponents = 3; // position, normals, indices ...\n    }\n\n    if (length % numComponents > 0) {\n      throw 'can not guess numComponents. You should specify it.';\n    }\n\n    return numComponents;\n  }\n\n  function makeTypedArray(array, name) {\n    if (isArrayBuffer(array)) {\n      return array;\n    }\n\n    if (array.data && isArrayBuffer(array.data)) {\n      return array.data;\n    }\n\n    if (Array.isArray(array)) {\n      array = {\n        data: array\n      };\n    }\n\n    if (!array.numComponents) {\n      array.numComponents = guessNumComponentsFromName(name, array.length);\n    }\n\n    var type = array.type;\n\n    if (!type) {\n      if (name === 'indices') {\n        type = Uint16Array;\n      }\n    }\n\n    var typedArray = createAugmentedTypedArray(array.numComponents, array.data.length / array.numComponents | 0, type);\n    typedArray.push(array.data);\n    return typedArray;\n  }\n  /**\n   * @typedef {Object} AttribInfo\n   * @property {number} [numComponents] the number of components for this attribute.\n   * @property {number} [size] the number of components for this attribute.\n   * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n   * @property {boolean} [normalized] whether or not to normalize the data. Default = false\n   * @property {number} [offset] offset into buffer in bytes. Default = 0\n   * @property {number} [stride] the stride in bytes per element. Default = 0\n   * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n   * @memberOf module:webgl-utils\n   */\n\n  /**\n   * Creates a set of attribute data and WebGLBuffers from set of arrays\n   *\n   * Given\n   *\n   *      let arrays = {\n   *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n   *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n   *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n   *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n   *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n   *      };\n   *\n   * returns something like\n   *\n   *      let attribs = {\n   *        a_position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n   *        a_texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n   *        a_normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n   *        a_color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n   *      };\n   *\n   * @param {WebGLRenderingContext} gl The webgl rendering context.\n   * @param {Object.<string, array|typedarray>} arrays The arrays\n   * @param {Object.<string, string>} [opt_mapping] mapping from attribute name to array name.\n   *     if not specified defaults to \"a_name\" -> \"name\".\n   * @return {Object.<string, module:webgl-utils.AttribInfo>} the attribs\n   * @memberOf module:webgl-utils\n   */\n\n\n  function createAttribsFromArrays(gl, arrays, opt_mapping) {\n    var mapping = opt_mapping || createMapping(arrays);\n    var attribs = {};\n    Object.keys(mapping).forEach(function (attribName) {\n      var bufferName = mapping[attribName];\n      var origArray = arrays[bufferName];\n      var array = makeTypedArray(origArray, bufferName);\n      attribs[attribName] = {\n        buffer: createBufferFromTypedArray(gl, array),\n        numComponents: origArray.numComponents || array.numComponents || guessNumComponentsFromName(bufferName),\n        type: getGLTypeForTypedArray(gl, array),\n        normalize: getNormalizationForTypedArray(array)\n      };\n    });\n    return attribs;\n  }\n  /**\n   * tries to get the number of elements from a set of arrays.\n   */\n\n\n  function getNumElementsFromNonIndexedArrays(arrays) {\n    var key = Object.keys(arrays)[0];\n    var array = arrays[key];\n\n    if (isArrayBuffer(array)) {\n      return array.numElements;\n    } else {\n      return array.data.length / array.numComponents;\n    }\n  }\n  /**\n   * @typedef {Object} BufferInfo\n   * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n   * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n   * @property {Object.<string, module:webgl-utils.AttribInfo>} attribs The attribs approriate to call `setAttributes`\n   * @memberOf module:webgl-utils\n   */\n\n  /**\n   * Creates a BufferInfo from an object of arrays.\n   *\n   * This can be passed to {@link module:webgl-utils.setBuffersAndAttributes} and to\n   * {@link module:webgl-utils:drawBufferInfo}.\n   *\n   * Given an object like\n   *\n   *     let arrays = {\n   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n   *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n   *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n   *     };\n   *\n   *  Creates an BufferInfo like this\n   *\n   *     bufferInfo = {\n   *       numElements: 4,        // or whatever the number of elements is\n   *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n   *       attribs: {\n   *         a_position: { buffer: WebGLBuffer, numComponents: 3, },\n   *         a_normal:   { buffer: WebGLBuffer, numComponents: 3, },\n   *         a_texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n   *       },\n   *     };\n   *\n   *  The properties of arrays can be JavaScript arrays in which case the number of components\n   *  will be guessed.\n   *\n   *     let arrays = {\n   *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n   *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n   *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n   *        indices:  [0, 1, 2, 1, 2, 3],\n   *     };\n   *\n   *  They can also by TypedArrays\n   *\n   *     let arrays = {\n   *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n   *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n   *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n   *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n   *     };\n   *\n   *  Or augmentedTypedArrays\n   *\n   *     let positions = createAugmentedTypedArray(3, 4);\n   *     let texcoords = createAugmentedTypedArray(2, 4);\n   *     let normals   = createAugmentedTypedArray(3, 4);\n   *     let indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n   *\n   *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n   *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n   *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n   *     indices.push([0, 1, 2, 1, 2, 3]);\n   *\n   *     let arrays = {\n   *        position: positions,\n   *        texcoord: texcoords,\n   *        normal:   normals,\n   *        indices:  indices,\n   *     };\n   *\n   * For the last example it is equivalent to\n   *\n   *     let bufferInfo = {\n   *       attribs: {\n   *         a_position: { numComponents: 3, buffer: gl.createBuffer(), },\n   *         a_texcoods: { numComponents: 2, buffer: gl.createBuffer(), },\n   *         a_normals: { numComponents: 3, buffer: gl.createBuffer(), },\n   *       },\n   *       indices: gl.createBuffer(),\n   *       numElements: 6,\n   *     };\n   *\n   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_position.buffer);\n   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_texcoord.buffer);\n   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_normal.buffer);\n   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n   *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n   *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n   *\n   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n   * @param {Object.<string, array|object|typedarray>} arrays Your data\n   * @param {Object.<string, string>} [opt_mapping] an optional mapping of attribute to array name.\n   *    If not passed in it's assumed the array names will be mapped to an attribute\n   *    of the same name with \"a_\" prefixed to it. An other words.\n   *\n   *        let arrays = {\n   *           position: ...,\n   *           texcoord: ...,\n   *           normal:   ...,\n   *           indices:  ...,\n   *        };\n   *\n   *        bufferInfo = createBufferInfoFromArrays(gl, arrays);\n   *\n   *    Is the same as\n   *\n   *        let arrays = {\n   *           position: ...,\n   *           texcoord: ...,\n   *           normal:   ...,\n   *           indices:  ...,\n   *        };\n   *\n   *        let mapping = {\n   *          a_position: \"position\",\n   *          a_texcoord: \"texcoord\",\n   *          a_normal:   \"normal\",\n   *        };\n   *\n   *        bufferInfo = createBufferInfoFromArrays(gl, arrays, mapping);\n   *\n   * @return {module:webgl-utils.BufferInfo} A BufferInfo\n   * @memberOf module:webgl-utils\n   */\n\n\n  function createBufferInfoFromArrays(gl, arrays, opt_mapping) {\n    var bufferInfo = {\n      attribs: createAttribsFromArrays(gl, arrays, opt_mapping)\n    };\n    var indices = arrays.indices;\n\n    if (indices) {\n      indices = makeTypedArray(indices, 'indices');\n      bufferInfo.indices = createBufferFromTypedArray(gl, indices, gl.ELEMENT_ARRAY_BUFFER);\n      bufferInfo.numElements = indices.length;\n    } else {\n      bufferInfo.numElements = getNumElementsFromNonIndexedArrays(arrays);\n    }\n\n    return bufferInfo;\n  }\n  /**\n   * Creates buffers from typed arrays\n   *\n   * Given something like this\n   *\n   *     let arrays = {\n   *        positions: [1, 2, 3],\n   *        normals: [0, 0, 1],\n   *     }\n   *\n   * returns something like\n   *\n   *     buffers = {\n   *       positions: WebGLBuffer,\n   *       normals: WebGLBuffer,\n   *     }\n   *\n   * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n   *\n   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n   * @param {Object<string, array|typedarray>} arrays\n   * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n   * @memberOf module:webgl-utils\n   */\n\n\n  function createBuffersFromArrays(gl, arrays) {\n    var buffers = {};\n    Object.keys(arrays).forEach(function (key) {\n      var type = key === 'indices' ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;\n      var array = makeTypedArray(arrays[key], name);\n      buffers[key] = createBufferFromTypedArray(gl, array, type);\n    }); // hrm\n\n    if (arrays.indices) {\n      buffers.numElements = arrays.indices.length;\n    } else if (arrays.position) {\n      buffers.numElements = arrays.position.length / 3;\n    }\n\n    return buffers;\n  }\n  /**\n   * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n   *\n   * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n   * but calling this means if you switch from indexed data to non-indexed\n   * data you don't have to remember to update your draw call.\n   *\n   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n   * @param {module:webgl-utils.BufferInfo} bufferInfo as returned from createBufferInfoFromArrays\n   * @param {enum} [primitiveType] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...)\n   * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n   * @param {number} [offset] An optional offset. Defaults to 0.\n   * @memberOf module:webgl-utils\n   */\n\n\n  function drawBufferInfo(gl, bufferInfo, primitiveType, count, offset) {\n    var indices = bufferInfo.indices;\n    primitiveType = primitiveType === undefined ? gl.TRIANGLES : primitiveType;\n    var numElements = count === undefined ? bufferInfo.numElements : count;\n    offset = offset === undefined ? 0 : offset;\n\n    if (indices) {\n      gl.drawElements(primitiveType, numElements, gl.UNSIGNED_SHORT, offset);\n    } else {\n      gl.drawArrays(primitiveType, offset, numElements);\n    }\n  }\n  /**\n   * @typedef {Object} DrawObject\n   * @property {module:webgl-utils.ProgramInfo} programInfo A ProgramInfo as returned from createProgramInfo\n   * @property {module:webgl-utils.BufferInfo} bufferInfo A BufferInfo as returned from createBufferInfoFromArrays\n   * @property {Object<string, ?>} uniforms The values for the uniforms\n   * @memberOf module:webgl-utils\n   */\n\n  /**\n   * Draws a list of objects\n   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n   * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n   * @memberOf module:webgl-utils\n   */\n\n\n  function drawObjectList(gl, objectsToDraw) {\n    var lastUsedProgramInfo = null;\n    var lastUsedBufferInfo = null;\n    objectsToDraw.forEach(function (object) {\n      var programInfo = object.programInfo;\n      var bufferInfo = object.bufferInfo;\n      var bindBuffers = false;\n\n      if (programInfo !== lastUsedProgramInfo) {\n        lastUsedProgramInfo = programInfo;\n        gl.useProgram(programInfo.program);\n        bindBuffers = true;\n      } // Setup all the needed attributes.\n\n\n      if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n        lastUsedBufferInfo = bufferInfo;\n        setBuffersAndAttributes(gl, programInfo.attribSetters, bufferInfo);\n      } // Set the uniforms.\n\n\n      setUniforms(programInfo.uniformSetters, object.uniforms); // Draw\n\n      drawBufferInfo(gl, bufferInfo);\n    });\n  }\n\n  function glEnumToString(gl, v) {\n    var results = [];\n\n    for (var key in gl) {\n      if (gl[key] === v) {\n        results.push(key);\n      }\n    }\n\n    return results.length ? results.join(' | ') : \"0x\".concat(v.toString(16));\n  }\n\n  var isIE =\n  /*@cc_on!@*/\n   false || !!document.documentMode; // Edge 20+\n\n  var isEdge = !isIE && !!window.StyleMedia;\n\n  if (isEdge) {\n    // Hack for Edge. Edge's WebGL implmentation is crap still and so they\n    // only respond to \"experimental-webgl\". I don't want to clutter the\n    // examples with that so his hack works around it\n    HTMLCanvasElement.prototype.getContext = function (origFn) {\n      return function () {\n        var args = arguments;\n        var type = args[0];\n\n        if (type === 'webgl') {\n          args = [].slice.call(arguments);\n          args[0] = 'experimental-webgl';\n        }\n\n        return origFn.apply(this, args);\n      };\n    }(HTMLCanvasElement.prototype.getContext);\n  }\n\n  return {\n    createAugmentedTypedArray: createAugmentedTypedArray,\n    createAttribsFromArrays: createAttribsFromArrays,\n    createBuffersFromArrays: createBuffersFromArrays,\n    createBufferInfoFromArrays: createBufferInfoFromArrays,\n    createAttributeSetters: createAttributeSetters,\n    createProgram: createProgram,\n    createProgramFromScripts: createProgramFromScripts,\n    createProgramFromSources: createProgramFromSources,\n    createProgramInfo: createProgramInfo,\n    createUniformSetters: createUniformSetters,\n    createVAOAndSetAttributes: createVAOAndSetAttributes,\n    createVAOFromBufferInfo: createVAOFromBufferInfo,\n    drawBufferInfo: drawBufferInfo,\n    drawObjectList: drawObjectList,\n    glEnumToString: glEnumToString,\n    getExtensionWithKnownPrefixes: getExtensionWithKnownPrefixes,\n    resizeCanvasToDisplaySize: resizeCanvasToDisplaySize,\n    setAttributes: setAttributes,\n    setBuffersAndAttributes: setBuffersAndAttributes,\n    setUniforms: setUniforms\n  };\n})());\n// CONCATENATED MODULE: ./app-core/CanvasHelper.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction CanvasHelper_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction CanvasHelper_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction CanvasHelper_createClass(Constructor, protoProps, staticProps) { if (protoProps) CanvasHelper_defineProperties(Constructor.prototype, protoProps); if (staticProps) CanvasHelper_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar CanvasHelper_CanvasHelper = /*#__PURE__*/function () {\n  function CanvasHelper() {\n    CanvasHelper_classCallCheck(this, CanvasHelper);\n\n    this.screen = null;\n    this.canvas = null;\n    this.assets = null;\n    this.ctx = null;\n    this.gl = null;\n    this.imageProgram = null;\n    this.squareProgram = null;\n    this.textureInfoArray = {};\n  }\n\n  CanvasHelper_createClass(CanvasHelper, [{\n    key: \"init\",\n    value: function init(AssetLoader) {\n      this.screen = document.getElementById('screen');\n      this.canvas = document.createElement('canvas');\n      this.canvas.id = 'MainCanvas';\n      this.canvas.width = 240;\n      this.canvas.height = 320;\n      this.canvas.style.zIndex = 8;\n      this.canvas.style.position = 'absolute';\n      this.screen.appendChild(this.canvas);\n      this.gl = this.canvas.getContext('experimental-webgl', {\n        preserveDrawingBuffer: true\n      });\n      this.assets = AssetLoader; // Setup GLSL programs.\n\n      this.imageProgram = webgl_utils.createProgram(this.gl, this.createImageShaders());\n      this.squareProgram = webgl_utils.createProgram(this.gl, this.createSquareShaders()); // Look up where the vertex data needs to go.\n\n      this.positionLocation = this.gl.getAttribLocation(this.imageProgram, \"a_position\");\n      this.texcoordLocation = this.gl.getAttribLocation(this.imageProgram, \"a_texcoord\");\n      this.squarePositionLoc = this.gl.getAttribLocation(this.squareProgram, \"a_position\"); // Lookup uniforms.\n\n      this.matrixLocation = this.gl.getUniformLocation(this.imageProgram, \"u_matrix\");\n      this.textureLocation = this.gl.getUniformLocation(this.imageProgram, \"u_texture\");\n      this.imageColorUniformLoc = this.gl.getUniformLocation(this.imageProgram, 'u_color');\n      this.squareMatrixLocation = this.gl.getUniformLocation(this.squareProgram, \"u_matrix\");\n      this.squareColorUniformLoc = this.gl.getUniformLocation(this.squareProgram, 'u_color');\n      this.suqareSizeUniformLoc = this.gl.getUniformLocation(this.squareProgram, 'u_size'); // Square point position buffer\n\n      this.squarePositionBuffer = this.gl.createBuffer();\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.squarePositionBuffer);\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0, 0]), this.gl.STATIC_DRAW); // Create a buffer.\n\n      this.positionBuffer = this.gl.createBuffer();\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer); // Put a unit quad in the buffer\n\n      var positions = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1];\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(positions), this.gl.STATIC_DRAW); // Create a buffer for texture coords\n\n      this.texcoordBuffer = this.gl.createBuffer();\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer); // Put texcoords in the buffer\n\n      var texcoords = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1];\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(texcoords), this.gl.STATIC_DRAW); // Enable alpha for textures\n\n      this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n      this.gl.enable(this.gl.BLEND);\n\n      for (var _i = 0, _Object$entries = Object.entries(this.assets.images); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            img = _Object$entries$_i[1];\n\n        // creates a texture info { width: w, height: h, texture: tex }\n        // The texture will start with 1x1 pixels and be updated\n        // when the image has loaded\n        var texture = this.gl.createTexture();\n        this.gl.bindTexture(this.gl.TEXTURE_2D, texture); // let's assume all images are not a power of 2\n\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n        var textureInfo = {\n          width: 1,\n          height: 1,\n          texture: texture\n        };\n        textureInfo.width = img.width;\n        textureInfo.height = img.height;\n        this.gl.bindTexture(this.gl.TEXTURE_2D, textureInfo.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, img);\n        this.textureInfoArray[name] = textureInfo;\n      }\n\n      ;\n    }\n  }, {\n    key: \"loop\",\n    value: function loop(update, render) {\n      var _this = this;\n\n      var fps,\n          delta,\n          lastRender = Date.now() - 1;\n\n      var animate = function animate() {\n        delta = Date.now() - lastRender;\n        fps = parseInt(1000 / delta);\n        update(delta);\n\n        _this.gl.viewport(0, 0, _this.canvas.width, _this.canvas.height);\n\n        _this.gl.clearColor(0, 0, 0, 1);\n\n        _this.gl.clear(_this.gl.COLOR_BUFFER_BIT);\n\n        render();\n        lastRender = Date.now();\n        window.requestAnimationFrame(animate);\n      }; // Start the rendering loop\n\n\n      animate();\n    }\n  }, {\n    key: \"drawSquare\",\n    value: function drawSquare(rgba, x, y, s) {\n      this.gl.useProgram(this.squareProgram); // Setup the attributes to pull data from our buffers\n\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.squarePositionBuffer);\n      this.gl.enableVertexAttribArray(this.squarePositionLoc);\n      this.gl.vertexAttribPointer(this.squarePositionLoc, 2, this.gl.FLOAT, false, 0, 0); // this matirx will convert from pixels to clip space\n\n      var matrix = libs_m4.orthographic(0, this.canvas.width, this.canvas.height, 0, -1, 1); // this matrix will translate our quad to x, y\n\n      matrix = libs_m4.translate(matrix, x + s / 2, y + s / 2, 0);\n      matrix = libs_m4.scale(matrix, s, s, 1);\n      this.gl.uniformMatrix4fv(this.squareMatrixLocation, false, matrix);\n      this.gl.uniform1f(this.suqareSizeUniformLoc, s);\n      this.gl.uniform4fv(this.squareColorUniformLoc, new Float32Array(rgba));\n      this.gl.drawArrays(this.gl.POINTS, 0, 1);\n    }\n  }, {\n    key: \"drawImage\",\n    value: function drawImage(imageName, x, y) {\n      var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var flipx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var flipy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var textureInfo = this.textureInfoArray[imageName];\n      this.gl.bindTexture(this.gl.TEXTURE_2D, textureInfo.texture); // Tell WebGL to use our shader program pair\n\n      this.gl.useProgram(this.imageProgram); // Setup the attributes to pull data from our buffers\n\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n      this.gl.enableVertexAttribArray(this.positionLocation);\n      this.gl.vertexAttribPointer(this.positionLocation, 2, this.gl.FLOAT, false, 0, 0);\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer);\n      this.gl.enableVertexAttribArray(this.texcoordLocation);\n      this.gl.vertexAttribPointer(this.texcoordLocation, 2, this.gl.FLOAT, false, 0, 0); // this matirx will convert from pixels to clip space\n\n      var matrix = libs_m4.orthographic(0, this.canvas.width, this.canvas.height, 0, -1, 1); // this matrix will translate our quad to x, y\n\n      var xx = flipx ? x + textureInfo.width * 2 : x;\n      var yy = flipy ? y + extureInfo.height * 2 : y;\n      var sx = flipx ? -1 : 1;\n      var sy = flipy ? -1 : 1;\n      matrix = libs_m4.translate(matrix, xx, yy, 0);\n      matrix = libs_m4.scale(matrix, textureInfo.width * 2 * sx, textureInfo.height * 2 * sy, 1);\n      this.gl.uniformMatrix4fv(this.matrixLocation, false, matrix);\n      this.gl.uniform1i(this.textureLocation, 0);\n      this.gl.uniform4fv(this.imageColorUniformLoc, new Float32Array([1, 1, 1, a]));\n      this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n    }\n  }, {\n    key: \"createShader\",\n    value: function createShader(sourceCode, type) {\n      // Compiles either a shader of type gl.VERTEX_SHADER or gl.FRAGMENT_SHADER\n      var shader = this.gl.createShader(type);\n      this.gl.shaderSource(shader, sourceCode);\n      this.gl.compileShader(shader);\n\n      if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n        var info = this.gl.getShaderInfoLog(shader);\n        throw 'Could not compile WebGL program. \\n\\n' + info;\n      }\n\n      return shader;\n    }\n  }, {\n    key: \"createSquareShaders\",\n    value: function createSquareShaders() {\n      var vertex = this.createShader(\"\\n\\t\\t\\tattribute vec4 a_position;\\n\\t\\t\\tuniform mat4 u_matrix;\\n\\t\\t\\tuniform float u_size;\\n\\t\\t\\t\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\tgl_Position = u_matrix * a_position;\\n\\t\\t\\t\\tgl_PointSize = u_size;\\n\\t\\t\\t}\\n\\t\\t\", this.gl.VERTEX_SHADER);\n      var frag = this.createShader(\"\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tuniform vec4 u_color;\\n\\t\\t\\t\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\tgl_FragColor = u_color;\\n\\t\\t\\t}\\n\\t\\t\", this.gl.FRAGMENT_SHADER);\n      return [vertex, frag];\n    }\n  }, {\n    key: \"createImageShaders\",\n    value: function createImageShaders() {\n      var vertex = this.createShader(\"\\n\\t\\t\\tattribute vec4 a_position;\\n\\t\\t\\tattribute vec2 a_texcoord;\\n\\t\\t\\tuniform mat4 u_matrix;\\n\\t\\t\\tvarying vec2 v_texcoord;\\n\\t\\t\\t\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\tgl_Position = u_matrix * a_position;\\n\\t\\t\\t\\tv_texcoord = a_texcoord;\\n\\t\\t\\t}\\n\\t\\t\", this.gl.VERTEX_SHADER);\n      var frag = this.createShader(\"\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tvarying vec2 v_texcoord;\\n\\t\\t\\tuniform vec4 u_color;\\n\\t\\t\\tuniform sampler2D u_texture;\\n\\t\\t\\t\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\tgl_FragColor = texture2D(u_texture, v_texcoord) * u_color;\\n\\t\\t\\t}\\n\\t\\t\", this.gl.FRAGMENT_SHADER);\n      return [vertex, frag];\n    }\n  }]);\n\n  return CanvasHelper;\n}();\n\n/* harmony default export */ var app_core_CanvasHelper = (new CanvasHelper_CanvasHelper());\n// CONCATENATED MODULE: ./app-core/TransitionHelper.js\nfunction TransitionHelper_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction TransitionHelper_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction TransitionHelper_createClass(Constructor, protoProps, staticProps) { if (protoProps) TransitionHelper_defineProperties(Constructor.prototype, protoProps); if (staticProps) TransitionHelper_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar TransitionHelper = /*#__PURE__*/function () {\n  function TransitionHelper() {\n    TransitionHelper_classCallCheck(this, TransitionHelper);\n  }\n\n  TransitionHelper_createClass(TransitionHelper, [{\n    key: \"init\",\n    value: function init(gl) {\n      this.screen = document.getElementById('screen');\n      this.canvas = document.createElement('canvas');\n      this.canvas.id = 'TransitionCanvas';\n      this.width = 240;\n      this.height = 320;\n      this.canvas.width = this.width;\n      this.canvas.height = this.height;\n      this.canvas.style.zIndex = 99999999;\n      this.canvas.style.position = 'absolute';\n      this.screen.appendChild(this.canvas);\n      this.ctx = this.canvas.getContext('2d');\n      this.ctx.imageSmoothingEnabled = false;\n      this.ctx.mozImageSmoothingEnabled = false;\n      this.ctx.webkitImageSmoothingEnabled = false;\n      this.speed = 75;\n      this.ctx.transform(1, 0, 0, -1, 0, this.canvas.height);\n      this.gl = gl;\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(callback) {\n      var _this = this;\n\n      var count = 0;\n      this.sampleSize = 4;\n      this.inLoop = setInterval(function () {\n        if (_this.sampleSize > 40) {\n          clearInterval(_this.inLoop);\n          callback();\n          return;\n        }\n\n        count += 1;\n\n        _this.pixelate(_this.sampleSize);\n\n        _this.darken(count);\n\n        _this.sampleSize += 4;\n      }, this.speed);\n    }\n  }, {\n    key: \"leave\",\n    value: function leave(callback) {\n      var _this2 = this;\n\n      if (!callback) {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n        return;\n      }\n\n      var count = 10;\n      this.sampleSize = 40;\n      this.outLoop = setInterval(function () {\n        if (_this2.sampleSize == 0) {\n          clearInterval(_this2.outLoop);\n\n          _this2.ctx.clearRect(0, 0, _this2.width, _this2.height);\n\n          setTimeout(callback, _this2.speed);\n          return;\n        }\n\n        _this2.pixelate(_this2.sampleSize);\n\n        _this2.darken(count);\n\n        count -= 1;\n        _this2.sampleSize -= 4;\n      }, this.speed);\n    }\n  }, {\n    key: \"darken\",\n    value: function darken(count) {\n      if (count == 7) {\n        this.ctx.fillStyle = 'rgba(0,0,0,0.25)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n      }\n\n      if (count == 8) {\n        this.ctx.fillStyle = 'rgba(0,0,0,0.50)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n      }\n\n      if (count == 9) {\n        this.ctx.fillStyle = 'rgba(0,0,0,0.75)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n      }\n\n      if (count == 10) {\n        this.ctx.fillStyle = 'rgba(0,0,0,1)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n      }\n    }\n  }, {\n    key: \"pixelate\",\n    value: function pixelate(sampleSize) {\n      var width = this.gl.drawingBufferWidth;\n      var height = this.gl.drawingBufferHeight;\n      var size = width * height * 4;\n      var pixels = new Uint8Array(size);\n      this.gl.readPixels(0, 0, width, height, this.gl.RGBA, this.gl.UNSIGNED_BYTE, pixels);\n\n      for (var y = 0; y < height + sampleSize; y += sampleSize) {\n        for (var x = 0; x < width + sampleSize; x += sampleSize) {\n          var offset = (y * width + x) * 4;\n          var color = pixels.slice(offset, offset + 4);\n          this.ctx.fillStyle = \"rgb(\".concat(color[0], \", \").concat(color[1], \", \").concat(color[2], \")\");\n          this.ctx.fillRect(x - sampleSize / 2, y - sampleSize / 2, sampleSize, sampleSize);\n        }\n      }\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(value, min, max) {\n      return Math.min(Math.max(value, Math.min(min, max)), Math.max(min, max));\n    }\n  }]);\n\n  return TransitionHelper;\n}();\n\n/* harmony default export */ var app_core_TransitionHelper = (new TransitionHelper());\n// CONCATENATED MODULE: ./app-core/Grid.js\nfunction Grid_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Grid_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Grid_createClass(Constructor, protoProps, staticProps) { if (protoProps) Grid_defineProperties(Constructor.prototype, protoProps); if (staticProps) Grid_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Grid = /*#__PURE__*/function () {\n  function Grid() {\n    Grid_classCallCheck(this, Grid);\n\n    this.world = null;\n    this.entities = null;\n    this.global_x = 576;\n    this.global_y = 192;\n    this.size = 32;\n    this.gridList = [];\n    this.timePassed = 0; // Milliseconds\n  }\n\n  Grid_createClass(Grid, [{\n    key: \"reset\",\n    value: function reset() {\n      this.gridList = [];\n      this.addBlock(0, 0, 'dirt');\n      this.addBlock(1, 0, 'dirt');\n      this.addBlock(2, 0, 'dirt');\n      this.addBlock(3, 0, 'air');\n      this.addBlock(3, 1, 'dirt');\n      this.addBlock(4, 0, 'dirt');\n      this.addBlock(5, 0, 'dirt');\n      this.addBlock(6, 0, 'dirt');\n      this.randomizeLine(3);\n    }\n  }, {\n    key: \"addBlock\",\n    value: function addBlock(x, y, type) {\n      if (x < 0 || x > 6) type = 'hard';\n      this.gridList.push({\n        type: type,\n        x: x,\n        y: y\n      });\n    }\n  }, {\n    key: \"getBlockType\",\n    value: function getBlockType(x, y) {\n      if (y < 0) return null;\n\n      for (var i = 0; i < this.gridList.length; i++) {\n        if (this.gridList[i].x === x && this.gridList[i].y === y) {\n          return this.gridList[i].type;\n        }\n      }\n\n      return 'empty';\n    }\n  }, {\n    key: \"setBlock\",\n    value: function setBlock(x, y, type) {\n      for (var i = 0; i < this.gridList.length; i++) {\n        if (this.gridList[i].x === x && this.gridList[i].y === y) {\n          this.gridList[i] = {\n            type: type,\n            x: x,\n            y: y\n          };\n\n          if (type === 'bad_dirt') {\n            return;\n          }\n\n          var typeBelow = this.getBlockType(x, y + 1);\n          var typeAbove = this.getBlockType(x, y - 1);\n          var typeAtRight = this.getBlockType(x + 1, y);\n          var typeAtLeft = this.getBlockType(x - 1, y); // Check if surrounding empty blocks need replacement\n\n          if (typeBelow === 'empty') this.addBlock(x, y + 1, 'dirt');\n          if (typeAbove === 'empty') this.addBlock(x, y - 1, 'dirt');\n          if (typeAtRight === 'empty') this.addBlock(x + 1, y, 'dirt');\n          if (typeAtLeft === 'empty') this.addBlock(x - 1, y, 'dirt'); // Check if foe blocks need bad dirt replacement\n\n          if (typeBelow === 'foe') this.setBlock(x, y + 1, 'bad_dirt');\n          if (typeAbove === 'foe') this.setBlock(x, y - 1, 'bad_dirt');\n          if (typeAtRight === 'foe') this.setBlock(x + 1, y, 'bad_dirt');\n          if (typeAtLeft === 'foe') this.setBlock(x - 1, y, 'bad_dirt');\n\n          if (type === 'air') {\n            var treasureAbove = typeAbove ? typeAbove.indexOf('treasure') !== -1 : false;\n            var treasureBelow = typeBelow ? typeBelow.indexOf('treasure') !== -1 : false;\n            var treasureAtRight = typeAtRight ? typeAtRight.indexOf('treasure') !== -1 : false;\n            var treasureAtLeft = typeAtLeft ? typeAtLeft.indexOf('treasure') !== -1 : false;\n\n            if (treasureAbove) {\n              this.setBlock(x, y - 1, 'air');\n              this.entities.create(x, y - 1, typeAbove);\n            }\n\n            if (treasureBelow) {\n              this.setBlock(x, y + 1, 'air');\n              this.entities.create(x, y + 1, typeBelow);\n            }\n\n            if (treasureAtLeft) {\n              this.setBlock(x - 1, y, 'air');\n              this.entities.create(x - 1, y, typeAtLeft);\n            }\n\n            if (treasureAtRight) {\n              this.setBlock(x + 1, y, 'air');\n              this.entities.create(x + 1, y, typeAtRight);\n            }\n          }\n\n          return;\n        }\n      }\n\n      this.addBlock(x, y, type);\n    }\n  }, {\n    key: \"updateGrid\",\n    value: function updateGrid(player_y) {\n      this.gridList = this.gridList.filter(function (block) {\n        return block.y >= player_y - 4;\n      });\n      this.randomizeLine(player_y + 5);\n    }\n  }, {\n    key: \"randomizeLine\",\n    value: function randomizeLine(laneY) {\n      for (var x = 0; x < 7; x++) {\n        // Roll the dice for dirt\n        var dice = Math.random() * 100;\n\n        if (dice <= 7) {\n          // Roll again for treasure\n          dice = Math.floor(Math.random() * 100);\n\n          if (dice <= 20) {\n            this.setBlock(x, laneY, 'treasure2');\n          } else if (dice > 20 && dice <= 40) {\n            this.setBlock(x, laneY, 'treasure4');\n          } else if (dice > 40 && dice <= 60) {\n            this.setBlock(x, laneY, 'treasure0');\n          } else if (dice > 60 && dice <= 80) {\n            this.setBlock(x, laneY, 'treasure1');\n          } else if (dice > 80 && dice <= 85) {\n            this.setBlock(x, laneY, 'treasure5');\n          } else if (dice > 85 && dice <= 90) {\n            this.setBlock(x, laneY, 'treasure3');\n          } else if (dice > 95 && dice <= 100) {\n            this.setBlock(x, laneY, 'treasure6');\n          }\n        } else if (dice > 7 && dice < 12) {\n          this.setBlock(x, laneY, 'foe');\n        }\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(CanvasHelper) {\n      if (this.gridList.length < 1) return; // Draw air first\n\n      for (var i = 0; i < this.gridList.length; i++) {\n        var isAir = this.gridList[i].type === 'air';\n        var isTreasure = this.gridList[i].type.indexOf('treasure') !== -1;\n\n        if (isAir || isTreasure) {\n          var x = this.world.x + this.global_x + this.gridList[i].x * this.size;\n          var y = this.world.y + this.global_y + this.gridList[i].y * this.size;\n\n          if (isAir) {\n            CanvasHelper.drawSquare([0.721, 0.768, 0.831, 1], x - 1, y - 1, 34);\n          } else {\n            CanvasHelper.drawSquare([0.721, 0.768, 0.831, 1], x, y, 32);\n          }\n        }\n      } // Then everything else\n\n\n      for (var i = 0; i < this.gridList.length; i++) {\n        if (this.gridList[i].type === 'air') {\n          continue;\n        }\n\n        var _x = this.world.x + this.global_x + this.gridList[i].x * this.size;\n\n        var _y = this.world.y + this.global_y + this.gridList[i].y * this.size;\n\n        if (this.gridList[i].type.indexOf('treasure') !== -1) {\n          CanvasHelper.drawImage(this.gridList[i].type, _x, _y);\n        }\n\n        if (this.gridList[i].type === 'dirt' || this.gridList[i].type === 'hard') {\n          CanvasHelper.drawImage('dirt', _x, _y);\n        }\n\n        if (this.gridList[i].type === 'bad_dirt') {\n          CanvasHelper.drawImage('dirt', _x, _y);\n        }\n      }\n    }\n  }]);\n\n  return Grid;\n}();\n\n/* harmony default export */ var app_core_Grid = (new Grid());\n// CONCATENATED MODULE: ./app-core/Utilities.js\nfunction easeInOutQuint(t, b, c, d) {\n  if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;\n  return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n}\nfunction easeLinear(t, b, c, d) {\n  return c * t / d + b;\n}\n// CONCATENATED MODULE: ./app-core/World.js\nfunction World_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction World_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction World_createClass(Constructor, protoProps, staticProps) { if (protoProps) World_defineProperties(Constructor.prototype, protoProps); if (staticProps) World_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar World_World = /*#__PURE__*/function () {\n  function World() {\n    World_classCallCheck(this, World);\n\n    this.sky_x = 0;\n    this.skyDistance = 240;\n    this.ground_length = 568;\n    this.ground_y = 192;\n    this.x = 0;\n    this.y = 0;\n    this.timePassed = 0; // Milliseconds\n\n    this.titleAlpha = 1;\n  }\n\n  World_createClass(World, [{\n    key: \"updateCamera\",\n    value: function updateCamera(py) {\n      this.y = -(py - 160);\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      // Move world\n      if (this.x > -this.ground_length) {\n        this.timePassed += delta;\n        this.x = -easeInOutQuint(this.timePassed / 1000, 0, this.ground_length, 10);\n      } // Move sky (parallax)\n\n\n      if (this.sky_x > -this.skyDistance) {\n        this.timePassed += delta;\n        this.sky_x = -easeInOutQuint(this.timePassed / 1000, 0, this.skyDistance, 10);\n      } // Update title alpha\n\n\n      if (this.titleAlpha > 0) {\n        this.titleAlpha = 1 - easeInOutQuint(this.timePassed / 1000, 0, 1, 10);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(CanvasHelper) {\n      // Sky\n      CanvasHelper.drawImage('sky', this.sky_x, this.y);\n      CanvasHelper.drawImage('dithering', 0, this.y); // Title\n\n      if (this.titleAlpha > 0) {\n        CanvasHelper.drawImage('title', 4, this.y + 14, this.titleAlpha);\n      } // Decorative tiles\n\n\n      CanvasHelper.drawImage('ground', this.x, this.y + this.ground_y);\n      CanvasHelper.drawImage('dirt', this.x + 800, this.y + this.ground_y);\n    }\n  }]);\n\n  return World;\n}();\n\n/* harmony default export */ var app_core_World = (new World_World());\n// CONCATENATED MODULE: ./app-core/Player.js\nfunction Player_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Player_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Player_createClass(Constructor, protoProps, staticProps) { if (protoProps) Player_defineProperties(Constructor.prototype, protoProps); if (staticProps) Player_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Player_Player = /*#__PURE__*/function () {\n  function Player() {\n    Player_classCallCheck(this, Player);\n\n    this.world = null;\n    this.assets = null;\n    this.entities = null;\n    this.game = null;\n    this.grid = null;\n    this.grid_x = 2;\n    this.grid_y = -1;\n    this.grid_size = 32;\n    this.grid_startx = 576;\n    this.grid_starty = 192;\n    this.x = this.grid_startx + this.grid_x * this.grid_size;\n    this.y = this.grid_starty + this.grid_y * this.grid_size;\n    this.dx = this.x;\n    this.dy = this.y;\n    this.movingTime = 0; // Milliseconds\n\n    this.dir = 'right';\n    this.speed = 0.5; // Seconds? - More means slower\n\n    this.isMoving = false;\n    this.isFalling = false;\n    this.lastKeyPressed = false;\n    this.sprite = 'idle';\n    this.last_sprite = 'idle';\n    this.canMove = false;\n  }\n\n  Player_createClass(Player, [{\n    key: \"reset\",\n    value: function reset() {\n      this.grid_x = 2;\n      this.grid_y = -1;\n      this.x = this.grid_startx + this.grid_x * this.grid_size;\n      this.y = this.grid_starty + this.grid_y * this.grid_size;\n      this.dx = this.x;\n      this.dy = this.y;\n      this.movingTime = 0; // Milliseconds\n\n      this.dir = 'right';\n      this.isMoving = false;\n      this.isFalling = false;\n      this.lastKeyPressed = false;\n      this.sprite = 'idle';\n      this.canMove = false;\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      // Gravity\n      if (this.y < this.dy) {\n        this.isFalling = true;\n        this.sprite = 'move';\n        this.movingTime += delta;\n        this.y += easeLinear(this.movingTime / 1000, 0, this.grid_size, this.speed);\n      }\n\n      if (this.y >= this.dy && this.isFalling) {\n        this.y = this.dy;\n        this.movingTime = 0;\n        this.isFalling = false;\n        this.sprite = 'idle';\n        this.assets.playSound('step');\n        this.calculateGridPosition(); // Updating the grid and treasure lists for clean up, etc.\n\n        this.grid.updateGrid(this.grid_y);\n        this.entities.clean(this.grid_y);\n      } // Move right\n\n\n      if (this.dir === 'right') {\n        if (this.x < this.dx) {\n          this.isMoving = true;\n          this.sprite = 'move';\n          this.movingTime += delta;\n          this.x += easeLinear(this.movingTime / 1000, 0, this.grid_size, this.speed);\n        }\n\n        if (this.x >= this.dx && this.isMoving) {\n          this.x = this.dx;\n          this.movingTime = 0;\n          this.isMoving = false;\n          this.sprite = 'idle';\n          this.calculateGridPosition();\n\n          if (this.lastKeyPressed === 'left') {\n            this.dir = 'left';\n          }\n        } // Move left\n\n      } else if (this.dir === 'left') {\n        if (this.x > this.dx) {\n          this.isMoving = true;\n          this.sprite = 'move';\n          this.movingTime += delta;\n          this.x -= easeLinear(this.movingTime / 1000, 0, this.grid_size, this.speed);\n        }\n\n        if (this.x <= this.dx && this.isMoving) {\n          this.x = this.dx;\n          this.movingTime = 0;\n          this.isMoving = false;\n          this.sprite = 'idle';\n          this.calculateGridPosition();\n\n          if (this.lastKeyPressed === 'right') {\n            this.dir = 'right';\n          }\n        }\n      } // Camera\n\n\n      this.world.updateCamera(this.y);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(CanvasHelper) {\n      CanvasHelper.drawImage(this.sprite, this.world.x + this.x, this.world.y + this.y, 1, this.dir === 'left');\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(key) {\n      var _this = this;\n\n      if (!this.canMove) {\n        return;\n      } // Move left\n\n\n      if (key === '4' || key === 'ArrowLeft') {\n        this.lastKeyPressed = 'left';\n        var canMoveLeft = this.grid.getBlockType(this.grid_x - 1, this.grid_y) === 'air' || this.grid.getBlockType(this.grid_x - 1, this.grid_y) === null;\n\n        if (canMoveLeft) {\n          this.assets.playSound('step');\n        }\n\n        if (!this.isMoving && !this.isFalling && canMoveLeft) {\n          this.dir = 'left';\n          this.movingTime = 0;\n          this.dx = this.x - this.grid_size;\n        }\n\n        if (!canMoveLeft || this.isFalling) {\n          this.dir = 'left';\n        }\n      } // Move right\n\n\n      if (key === '6' || key === 'ArrowRight') {\n        this.lastKeyPressed = 'right';\n        var canMoveRight = this.grid.getBlockType(this.grid_x + 1, this.grid_y) === 'air' || this.grid.getBlockType(this.grid_x + 1, this.grid_y) === null;\n\n        if (canMoveRight) {\n          this.assets.playSound('step');\n        }\n\n        if (!this.isMoving && !this.isFalling && canMoveRight) {\n          this.dir = 'right';\n          this.movingTime = 0;\n          this.dx = this.x + this.grid_size;\n        }\n\n        if (!canMoveRight || this.isFalling) {\n          this.dir = 'right';\n        }\n      } // Dig straight\n\n\n      if (key === '5' || key === 'Enter') {\n        this.assets.playSound('dig');\n        this.sprite = 'dig';\n        var dirtAtRight = this.grid.getBlockType(this.grid_x + 1, this.grid_y) === 'dirt';\n        var dirtAtLeft = this.grid.getBlockType(this.grid_x - 1, this.grid_y) === 'dirt';\n        var foeAtRight = this.grid.getBlockType(this.grid_x + 1, this.grid_y) === 'bad_dirt';\n        var foeAtLeft = this.grid.getBlockType(this.grid_x - 1, this.grid_y) === 'bad_dirt';\n\n        if (this.dir === 'right' && dirtAtRight) {\n          this.grid.setBlock(this.grid_x + 1, this.grid_y, 'air');\n        } else if (this.dir === 'right' && foeAtRight) {\n          this.grid.setBlock(this.grid_x + 1, this.grid_y, 'air');\n          this.entities.create(this.grid_x + 1, this.grid_y, 'foe');\n        }\n\n        if (this.dir === 'left' && dirtAtLeft) {\n          this.grid.setBlock(this.grid_x - 1, this.grid_y, 'air');\n        } else if (this.dir === 'left' && foeAtLeft) {\n          this.grid.setBlock(this.grid_x - 1, this.grid_y, 'air');\n          this.entities.create(this.grid_x - 1, this.grid_y, 'foe');\n        }\n\n        setTimeout(function () {\n          return _this.sprite = 'idle';\n        }, 150);\n      } // Dig down\n\n\n      if (key === '8' || key === 'ArrowDown') {\n        this.assets.playSound('dig');\n        this.sprite = 'dig';\n\n        var _dirtAtRight = this.grid.getBlockType(this.grid_x + 1, this.grid_y) === 'dirt';\n\n        var _dirtAtLeft = this.grid.getBlockType(this.grid_x - 1, this.grid_y) === 'dirt';\n\n        var dirtAtBottomRight = this.grid.getBlockType(this.grid_x + 1, this.grid_y + 1) === 'dirt' || this.grid.getBlockType(this.grid_x + 1, this.grid_y + 1) === 'empty';\n        var dirtAtBottomLeft = this.grid.getBlockType(this.grid_x - 1, this.grid_y + 1) === 'dirt' || this.grid.getBlockType(this.grid_x - 1, this.grid_y + 1) === 'empty';\n\n        var _foeAtRight = this.grid.getBlockType(this.grid_x + 1, this.grid_y) === 'bad_dirt';\n\n        var _foeAtLeft = this.grid.getBlockType(this.grid_x - 1, this.grid_y) === 'bad_dirt';\n\n        var foeAtBottomRight = this.grid.getBlockType(this.grid_x + 1, this.grid_y + 1) === 'bad_dirt' || this.grid.getBlockType(this.grid_x + 1, this.grid_y + 1) === 'foe';\n        var foeAtBottomLeft = this.grid.getBlockType(this.grid_x - 1, this.grid_y + 1) === 'bad_dirt' || this.grid.getBlockType(this.grid_x - 1, this.grid_y + 1) === 'foe';\n\n        if (this.dir === 'right') {\n          if (_dirtAtRight) {\n            this.grid.setBlock(this.grid_x + 1, this.grid_y, 'air');\n          }\n\n          if (_foeAtRight) {\n            this.grid.setBlock(this.grid_x + 1, this.grid_y, 'air');\n            this.entities.create(this.grid_x + 1, this.grid_y, 'foe');\n          }\n\n          if (dirtAtBottomRight) {\n            this.grid.setBlock(this.grid_x + 1, this.grid_y + 1, 'air');\n          }\n\n          if (foeAtBottomRight) {\n            this.grid.setBlock(this.grid_x + 1, this.grid_y + 1, 'air');\n            this.entities.create(this.grid_x + 1, this.grid_y + 1, 'foe');\n          }\n        }\n\n        if (this.dir === 'left') {\n          if (_dirtAtLeft) {\n            this.grid.setBlock(this.grid_x - 1, this.grid_y, 'air');\n          }\n\n          if (_foeAtLeft) {\n            this.grid.setBlock(this.grid_x - 1, this.grid_y, 'air');\n            this.entities.create(this.grid_x - 1, this.grid_y, 'foe');\n          }\n\n          if (dirtAtBottomLeft) {\n            this.grid.setBlock(this.grid_x - 1, this.grid_y + 1, 'air');\n          }\n\n          if (foeAtBottomLeft) {\n            this.grid.setBlock(this.grid_x - 1, this.grid_y + 1, 'air');\n            this.entities.create(this.grid_x - 1, this.grid_y + 1, 'foe');\n          }\n        }\n\n        setTimeout(function () {\n          return _this.sprite = 'idle';\n        }, 150);\n      }\n    }\n  }, {\n    key: \"burn\",\n    value: function burn() {\n      var _this2 = this;\n\n      this.last_sprite = this.sprite;\n      this.assets.playSound('hurt');\n      this.sprite = 'hurt';\n      setTimeout(function () {\n        _this2.sprite = _this2.last_sprite;\n      }, 500);\n      this.game.substractTime(10);\n    }\n  }, {\n    key: \"calculateGridPosition\",\n    value: function calculateGridPosition() {\n      var _this3 = this;\n\n      this.grid_x = Math.floor((this.x - this.grid_startx) / this.grid_size);\n      this.grid_y = Math.floor((this.y - this.grid_starty) / this.grid_size);\n\n      if (this.grid.getBlockType(this.grid_x, this.grid_y + 1) === 'air') {\n        if (!this.isFalling) {\n          this.movingTime = 0;\n          this.dy = this.y + this.grid_size;\n        }\n      }\n\n      this.entities.removeAtPos(this.grid_x, this.grid_y, function (entities) {\n        var playGoodSound = false;\n        var playHurtSound = false;\n        entities.forEach(function (t) {\n          switch (t) {\n            case 'treasure2':\n              _this3.game.addPoints(15);\n\n              playGoodSound = true;\n              break;\n\n            case 'treasure4':\n              _this3.game.addPoints(20);\n\n              playGoodSound = true;\n              break;\n\n            case 'treasure0':\n              _this3.game.addPoints(25);\n\n              playGoodSound = true;\n              break;\n\n            case 'treasure1':\n              _this3.game.addPoints(30);\n\n              playGoodSound = true;\n              break;\n\n            case 'treasure5':\n              _this3.game.addPoints(80);\n\n              playGoodSound = true;\n              break;\n\n            case 'treasure3':\n              _this3.game.addPoints(100);\n\n              playGoodSound = true;\n              break;\n\n            case 'treasure6':\n              _this3.game.addTime(15);\n\n              playGoodSound = true;\n              break;\n\n            case 'scorpion':\n              playHurtSound = true;\n              _this3.last_sprite = _this3.sprite;\n              _this3.sprite = 'hurt';\n              _this3.canMove = false;\n              setTimeout(function () {\n                _this3.sprite = _this3.last_sprite;\n                _this3.canMove = true;\n              }, 1000);\n              break;\n\n            case 'fire':\n              _this3.burn();\n\n              break;\n          }\n        });\n\n        if (playGoodSound) {\n          var rate = _this3.game.score >= _this3.game.goal ? 1.25 : 1;\n\n          _this3.assets.playSound('good', rate);\n        }\n\n        if (playHurtSound) {\n          _this3.assets.playSound('hurt');\n        }\n      });\n    }\n  }]);\n\n  return Player;\n}();\n\n/* harmony default export */ var app_core_Player = (new Player_Player());\n// CONCATENATED MODULE: ./app-core/EntityHelper.js\nfunction EntityHelper_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction EntityHelper_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction EntityHelper_createClass(Constructor, protoProps, staticProps) { if (protoProps) EntityHelper_defineProperties(Constructor.prototype, protoProps); if (staticProps) EntityHelper_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar EntityHelper_EntityHelper = /*#__PURE__*/function () {\n  function EntityHelper() {\n    EntityHelper_classCallCheck(this, EntityHelper);\n\n    this.list = [];\n    this.world = null;\n    this.assets = null;\n    this.player = null;\n    this.grid = null;\n    this.gravity = 0.1;\n    this.speed = 2;\n    this.elapsedTime = 0;\n    this.shouldFlip = false;\n  }\n\n  EntityHelper_createClass(EntityHelper, [{\n    key: \"create\",\n    value: function create(gx, gy, type) {\n      var x = this.world.x + this.grid.global_x + gx * this.grid.size;\n      var y = this.world.y + this.grid.global_y + gy * this.grid.size;\n\n      if (type === 'foe') {\n        var dice = Math.random();\n        type = dice >= 0.5 ? 'scorpion' : 'fire';\n      }\n\n      this.list.push({\n        type: type,\n        grid_x: gx,\n        grid_y: gy,\n        x: x,\n        y: y,\n        dx: x,\n        dy: y,\n        isFalling: false,\n        isMoving: false,\n        dir: 'right',\n        newborn: true,\n        fallingTime: 0,\n        // Milliseconds\n        movingTime: 0 // Milliseconds\n\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.list = [];\n    }\n  }, {\n    key: \"clean\",\n    value: function clean(player_y) {\n      this.list = this.list.filter(function (t) {\n        return t.grid_y >= player_y - 4;\n      });\n    }\n  }, {\n    key: \"canBurnItem\",\n    value: function canBurnItem(x, y) {\n      if (this.list < 1) {\n        return false;\n      }\n\n      for (var i = 0; i < this.list.length; i++) {\n        var isBurnable = this.list[i].type.indexOf('treasure') !== -1 || this.list[i].type === 'scorpion';\n\n        if (this.list[i].grid_x === x && this.list[i].grid_y === y && isBurnable) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"removeAtPos\",\n    value: function removeAtPos(x, y, callback) {\n      if (this.list < 1) {\n        return false;\n      }\n\n      var entitiesAtPos = [];\n\n      for (var i = 0; i < this.list.length; i++) {\n        if (this.list[i].grid_x === x && this.list[i].grid_y === y) {\n          entitiesAtPos.push(this.list[i].type);\n          this.list[i] = null;\n        }\n      }\n\n      if (entitiesAtPos.length > 0) {\n        this.list = this.list.filter(function (t) {\n          return t !== null;\n        });\n        callback(entitiesAtPos);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var _this = this;\n\n      if (this.list.length < 1) return;\n      this.elapsedTime += delta;\n\n      if (this.elapsedTime >= 500) {\n        this.shouldFlip = !this.shouldFlip;\n        this.elapsedTime = 0;\n      }\n\n      for (var i = 0; i < this.list.length; i++) {\n        var blockBelow = this.grid.getBlockType(this.list[i].grid_x, this.list[i].grid_y + 1);\n        this.list[i].y = this.world.y + this.grid.global_y + this.list[i].grid_y * this.grid.size;\n\n        if (this.list[i].type === 'fire') {\n          var blockAtRight = this.grid.getBlockType(this.list[i].grid_x + 1, this.list[i].grid_y);\n          var blockAtLeft = this.grid.getBlockType(this.list[i].grid_x - 1, this.list[i].grid_y);\n\n          if (blockAtRight === 'air' && this.list[i].dir === 'right' && !this.list[i].isFalling) {\n            if (this.list[i].newborn) {\n              this.list[i].newborn = false;\n            }\n\n            if (!this.list[i].isMoving) {\n              this.list[i].movingTime = 0;\n              this.list[i].dx = this.list[i].x + this.grid.size;\n            }\n\n            if (this.list[i].x < this.list[i].dx) {\n              this.list[i].isMoving = true;\n              this.list[i].movingTime += delta;\n              this.list[i].x += easeLinear(this.list[i].movingTime / 1000, 0, this.grid.size, this.speed);\n            }\n\n            if (this.list[i].x >= this.list[i].dx && this.list[i].isMoving) {\n              this.list[i].x = this.list[i].dx;\n              this.list[i].movingTime = 0;\n              this.list[i].isMoving = false;\n              this.list[i].grid_x += 1;\n\n              if (this.list[i].grid_x === this.player.grid_x && this.list[i].grid_y === this.player.grid_y) {\n                this.player.burn();\n\n                if (this.removeAtPos(this.list[i].grid_x, this.list[i].grid_y, function () {})) {\n                  continue;\n                }\n              }\n\n              if (this.canBurnItem(this.list[i].grid_x, this.list[i].grid_y)) {\n                var playSound = function playSound() {\n                  return _this.assets.playSound('hurt');\n                };\n\n                if (this.removeAtPos(this.list[i].grid_x, this.list[i].grid_y, playSound)) {\n                  continue;\n                }\n              }\n\n              if (this.grid.getBlockType(this.list[i].grid_x + 1, this.list[i].grid_y) !== 'air') {\n                this.list[i].dir = 'left';\n              }\n            }\n          }\n\n          if (blockAtLeft === 'air' && (this.list[i].dir === 'left' || this.list[i].newborn) && !this.list[i].isFalling) {\n            if (this.list[i].newborn) {\n              this.list[i].newborn = false;\n              this.list[i].dir = 'left';\n            }\n\n            if (!this.list[i].isMoving) {\n              this.list[i].movingTime = 0;\n              this.list[i].dx = this.list[i].x - this.grid.size;\n            }\n\n            if (this.list[i].x > this.list[i].dx) {\n              this.list[i].isMoving = true;\n              this.list[i].movingTime += delta;\n              this.list[i].x -= easeLinear(this.list[i].movingTime / 1000, 0, this.grid.size, this.speed);\n            }\n\n            if (this.list[i].x <= this.list[i].dx && this.list[i].isMoving) {\n              this.list[i].x = this.list[i].dx;\n              this.list[i].movingTime = 0;\n              this.list[i].isMoving = false;\n              this.list[i].grid_x -= 1;\n\n              if (this.list[i].grid_x === this.player.grid_x && this.list[i].grid_y === this.player.grid_y) {\n                this.player.burn();\n\n                if (this.removeAtPos(this.list[i].grid_x, this.list[i].grid_y, function () {})) {\n                  continue;\n                }\n              }\n\n              if (this.canBurnItem(this.list[i].grid_x, this.list[i].grid_y)) {\n                var _playSound = function _playSound() {\n                  return _this.assets.playSound('hurt');\n                };\n\n                if (this.removeAtPos(this.list[i].grid_x, this.list[i].grid_y, _playSound)) {\n                  continue;\n                }\n              }\n\n              if (this.grid.getBlockType(this.list[i].grid_x - 1, this.list[i].grid_y) !== 'air') {\n                this.list[i].dir = 'right';\n              }\n            }\n          }\n        }\n\n        if (blockBelow === 'air') {\n          if (!this.list[i].isFalling) {\n            this.list[i].fallingTime = 0;\n            this.list[i].dy = this.list[i].y + this.grid.size;\n          }\n\n          if (this.list[i].y < this.list[i].dy) {\n            this.list[i].isFalling = true;\n            this.list[i].fallingTime += delta;\n            this.list[i].y += easeLinear(this.list[i].fallingTime / 1000, 0, this.grid.size, this.gravity);\n          }\n\n          if (this.list[i].y >= this.list[i].dy && this.list[i].isFalling) {\n            this.list[i].y = this.list[i].dy;\n            this.list[i].fallingTime = 0;\n            this.list[i].isFalling = false;\n            this.list[i].grid_y += 1;\n\n            if (this.list[i].type === 'fire') {\n              if (this.list[i].grid_x === this.player.grid_x && this.list[i].grid_y === this.player.grid_y) {\n                this.player.burn();\n\n                if (this.removeAtPos(this.list[i].grid_x, this.list[i].grid_y, function () {})) {\n                  continue;\n                }\n              }\n\n              if (this.canBurnItem(this.list[i].grid_x, this.list[i].grid_y)) {\n                var _playSound2 = function _playSound2() {\n                  return _this.assets.playSound('hurt');\n                };\n\n                if (this.removeAtPos(this.list[i].grid_x, this.list[i].grid_y, _playSound2)) {\n                  continue;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(CanvasHelper) {\n      if (this.list.length < 1) return;\n\n      for (var i = 0; i < this.list.length; i++) {\n        if (this.list[i].type === 'scorpion' || this.list[i].type === 'fire') {\n          CanvasHelper.drawImage(this.list[i].type, this.list[i].x, this.list[i].y, 1, this.shouldFlip);\n        } else {\n          CanvasHelper.drawImage(this.list[i].type, this.list[i].x, this.list[i].y);\n        }\n      }\n    }\n  }]);\n\n  return EntityHelper;\n}();\n\n/* harmony default export */ var app_core_EntityHelper = (new EntityHelper_EntityHelper());\n// CONCATENATED MODULE: ./app-core/Game.js\nfunction Game_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Game_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Game_createClass(Constructor, protoProps, staticProps) { if (protoProps) Game_defineProperties(Constructor.prototype, protoProps); if (staticProps) Game_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Game = /*#__PURE__*/function () {\n  function Game() {\n    Game_classCallCheck(this, Game);\n\n    this.ui = null;\n    this.player = null;\n    this.assets = null;\n    this.grid = null;\n    this.transition = null;\n    this.entities = null;\n    this.level = 1;\n    this.maxTime = 60; // Seconds\n\n    this.remainingTime = this.maxTime;\n    this.goal = 500;\n    this.score = 0;\n    this.started = false;\n    this.elapsedTime = 0;\n    this.freeze = false;\n  }\n\n  Game_createClass(Game, [{\n    key: \"addPoints\",\n    value: function addPoints(points) {\n      this.score += points;\n      this.ui.updateScore(this.score, this.goal);\n    }\n  }, {\n    key: \"addTime\",\n    value: function addTime(time) {\n      if (this.remainingTime + time >= this.maxTime) {\n        this.remainingTime = this.maxTime;\n      } else {\n        this.remainingTime += time;\n      }\n    }\n  }, {\n    key: \"substractTime\",\n    value: function substractTime(time) {\n      if (this.remainingTime - time <= 0) {\n        this.remainingTime = 0;\n      } else {\n        this.remainingTime -= time;\n      }\n    }\n  }, {\n    key: \"endLevel\",\n    value: function endLevel() {\n      var _this = this;\n\n      this.transition.enter(function () {\n        _this.player.reset();\n\n        _this.grid.reset();\n\n        _this.entities.reset();\n\n        _this.freeze = false; // Lost, go to game over screen.\n\n        if (_this.goal > _this.score) {\n          _this.ui.showGameOver();\n\n          _this.transition.leave();\n\n          return; // Won, setup new level.\n        } else if (_this.score >= _this.goal) {\n          var extraPoints = _this.score - _this.goal;\n          var bonusRatio = extraPoints / _this.goal;\n          _this.maxTime = Math.floor(_this.maxTime * (1 + bonusRatio / 2));\n          _this.level += 1;\n          var newGoal = Math.floor(_this.goal * 1.5); // I guess level will do something here?\n\n          _this.goal = newGoal - newGoal % 5; // Only multiples of 5.\n        } // Reset anyways\n\n\n        _this.remainingTime = _this.maxTime;\n        _this.score = 0; // Show UI\n\n        _this.ui.isActive = false;\n\n        _this.ui.updateScore(_this.score, _this.goal);\n\n        _this.ui.updateTime(_this.remainingTime, _this.maxTime);\n\n        _this.ui.updateLevel(_this.level); // Show level again.\n\n\n        _this.transition.leave(function () {\n          _this.ui.show();\n        });\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var _this2 = this;\n\n      if (this.started) {\n        this.elapsedTime += delta;\n\n        if (this.elapsedTime >= 1000) {\n          this.remainingTime -= 1;\n          this.elapsedTime = 0;\n\n          if (this.remainingTime <= 0) {\n            this.started = false;\n            this.freeze = true;\n            var ringer = null;\n\n            if (this.goal < this.score) {\n              ringer = setInterval(function () {\n                return _this2.assets.playSound('good');\n              }, 180);\n            }\n\n            setTimeout(function () {\n              if (ringer !== null) {\n                clearInterval(ringer);\n\n                _this2.assets.playSound('start');\n              } else {\n                _this2.assets.playSound('loose');\n              }\n\n              _this2.endLevel();\n            }, 1500);\n          }\n\n          this.ui.updateTime(this.remainingTime, this.maxTime);\n        }\n      }\n    }\n  }]);\n\n  return Game;\n}();\n\n/* harmony default export */ var app_core_Game = (new Game());\n// CONCATENATED MODULE: ./app-core/index.js\nfunction app_core_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction app_core_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction app_core_createClass(Constructor, protoProps, staticProps) { if (protoProps) app_core_defineProperties(Constructor.prototype, protoProps); if (staticProps) app_core_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\n\n\n\nvar app_core_AppCore = /*#__PURE__*/function () {\n  function AppCore() {\n    app_core_classCallCheck(this, AppCore);\n  }\n\n  app_core_createClass(AppCore, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      window.onload = function () {\n        if (navigator.userAgent.includes('KAIOS')) {\n          navigator.requestWakeLock('screen');\n        }\n\n        app_core_UserInterface.init();\n        app_core_AssetLoader.load().then(function () {\n          // Initialize canvas helper\n          app_core_CanvasHelper.init(app_core_AssetLoader);\n          app_core_TransitionHelper.init(app_core_CanvasHelper.gl); // Initialize keyboard event handler\n\n          document.addEventListener('keydown', _this.keyboardEventHandler); // Randomize the grid\n\n          app_core_Grid.reset(); // Initialing world\n\n          app_core_Grid.world = app_core_World;\n          app_core_Grid.entities = app_core_EntityHelper;\n          app_core_EntityHelper.world = app_core_World;\n          app_core_EntityHelper.grid = app_core_Grid;\n          app_core_EntityHelper.assets = app_core_AssetLoader;\n          app_core_EntityHelper.player = app_core_Player;\n          app_core_Player.assets = app_core_AssetLoader;\n          app_core_Player.world = app_core_World;\n          app_core_Player.game = app_core_Game;\n          app_core_Player.grid = app_core_Grid;\n          app_core_Player.entities = app_core_EntityHelper;\n          app_core_Game.ui = app_core_UserInterface;\n          app_core_Game.player = app_core_Player;\n          app_core_Game.grid = app_core_Grid;\n          app_core_Game.entities = app_core_EntityHelper;\n          app_core_Game.assets = app_core_AssetLoader;\n          app_core_Game.transition = app_core_TransitionHelper; // Preapare the ad\n\n          app_core_UserInterface.prepareAd();\n\n          if (true) {\n            window.Grid = app_core_Grid;\n            window.World = app_core_World;\n            window.Player = app_core_Player;\n            window.AssetLoader = app_core_AssetLoader;\n            window.CanvasHelper = app_core_CanvasHelper;\n            window.EntityHelper = app_core_EntityHelper;\n            window.Game = app_core_Game;\n            window.UserInterface = app_core_UserInterface;\n            window.TransitionHelper = app_core_TransitionHelper;\n          }\n\n          app_core_AssetLoader.playSound('start');\n          setTimeout(function () {\n            app_core_UserInterface.updateScore(app_core_Game.score, app_core_Game.goal);\n            app_core_UserInterface.show();\n          }, 5000); // Start the main loop\n\n          app_core_CanvasHelper.loop(_this.update, _this.draw);\n        });\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      if (app_core_Game.freeze) {\n        return;\n      }\n\n      app_core_World.update(delta);\n      app_core_Player.update(delta);\n      app_core_EntityHelper.update(delta);\n      app_core_Game.update(delta);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      app_core_World.draw(app_core_CanvasHelper);\n      app_core_Grid.draw(app_core_CanvasHelper);\n      app_core_EntityHelper.draw(app_core_CanvasHelper);\n      app_core_Player.draw(app_core_CanvasHelper);\n    }\n  }, {\n    key: \"keyboardEventHandler\",\n    value: function keyboardEventHandler(event) {\n      event.preventDefault();\n\n      if (app_core_UserInterface.isActive && !app_core_Player.canMove && !app_core_Game.started) {\n        app_core_Player.canMove = true;\n        app_core_Game.started = true;\n        app_core_UserInterface.hideDialog();\n        return;\n      }\n\n      if (!app_core_Game.freeze) {\n        app_core_Player.onKeyDown(event.key);\n      }\n\n      if (event.key === 'Backspace') {\n        if (confirm(\"Are you sure you want to quit the game?\")) {\n          window.close();\n        }\n      }\n\n      if (event.key === '1') {\n        app_core_AssetLoader.turnVolumeDown();\n      }\n\n      if (event.key === '3') {\n        app_core_AssetLoader.turnVolumeUp();\n      }\n    }\n  }]);\n\n  return AppCore;\n}();\n\nvar App = new app_core_AppCore();\nApp.init();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")}]);